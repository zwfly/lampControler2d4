C51 COMPILER V9.56.0.0   BSP_KEY                                                           12/07/2017 20:58:10 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SIZE) BROWSE INCDIR(..\Common\inc;
                    -..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) OBJECT
                    -(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *      模块名称 : 独立按键驱动模块
   5           *      文件名称 : bsp_key.c
   6           *      版    本 : V1.0
   7           *      说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *                              (1) 按键按下
   9           *                              (2) 按键弹起
  10           *                              (3) 长按键
  11           *                              (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          
  18          static idata KEY_T s_tBtn[KEY_COUNT];
  19          static idata KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  20          
  21          static void bsp_InitKeyVar(void);
  22          static void bsp_InitKeyHard(void);
  23          static void bsp_DetectKey(uint8_t i);
  24          
  25          /*
  26           *********************************************************************************************************
  27           *      函 数 名: IsKeyDownX
  28           *      功能说明: 判断按键是否按下
  29           *      形    参: 无
  30           *      返 回 值: 返回值1 表示按下，0表示未按下
  31           *********************************************************************************************************
  32           */
  33          
  34          static uint8_t IsKeyDown1(void) {
  35   1              return ~P30;
  36   1      }
  37          
  38          static uint8_t IsKeyDown2(void) {
  39   1              return ~P17;
  40   1      }
  41          /*
  42           *********************************************************************************************************
  43           *      函 数 名: bsp_InitKey
  44           *      功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
  45           *      形    参:  无
  46           *      返 回 值: 无
  47           *********************************************************************************************************
  48           */
  49          void bsp_InitKey(void) {
  50   1              bsp_InitKeyVar(); /* 初始化按键变量 */
  51   1              bsp_InitKeyHard(); /* 初始化按键硬件 */
  52   1      }
  53          
C51 COMPILER V9.56.0.0   BSP_KEY                                                           12/07/2017 20:58:10 PAGE 2   

  54          /*
  55           *********************************************************************************************************
  56           *      函 数 名: bsp_PutKey
  57           *      功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
  58           *      形    参:  _KeyCode : 按键代码
  59           *      返 回 值: 无
  60           *********************************************************************************************************
  61           */
  62          void bsp_PutKey(uint8_t _KeyCode) {
  63   1              s_tKey.Buf[s_tKey.Write] = _KeyCode;
  64   1      
  65   1              if (++s_tKey.Write >= KEY_FIFO_SIZE) {
  66   2                      s_tKey.Write = 0;
  67   2              }
  68   1      }
  69          
  70          /*
  71           *********************************************************************************************************
  72           *      函 数 名: bsp_GetKey
  73           *      功能说明: 从按键FIFO缓冲区读取一个键值。
  74           *      形    参:  无
  75           *      返 回 值: 按键代码
  76           *********************************************************************************************************
  77           */
  78          uint8_t bsp_GetKey(void) {
  79   1              uint8_t ret;
  80   1      
  81   1              if (s_tKey.Read == s_tKey.Write) {
  82   2                      return KEY_NONE;
  83   2              } else {
  84   2                      ret = s_tKey.Buf[s_tKey.Read];
  85   2      
  86   2                      if (++s_tKey.Read >= KEY_FIFO_SIZE) {
  87   3                              s_tKey.Read = 0;
  88   3                      }
  89   2                      return ret;
  90   2              }
  91   1      }
  92          
  93          /*
  94           *********************************************************************************************************
  95           *      函 数 名: bsp_GetKey2
  96           *      功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
  97           *      形    参:  无
  98           *      返 回 值: 按键代码
  99           *********************************************************************************************************
 100           */
 101          uint8_t bsp_GetKey2(void) {
 102   1              uint8_t ret;
 103   1      
 104   1              if (s_tKey.Read2 == s_tKey.Write) {
 105   2                      return KEY_NONE;
 106   2              } else {
 107   2                      ret = s_tKey.Buf[s_tKey.Read2];
 108   2      
 109   2                      if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 110   3                              s_tKey.Read2 = 0;
 111   3                      }
 112   2                      return ret;
 113   2              }
 114   1      }
 115          
C51 COMPILER V9.56.0.0   BSP_KEY                                                           12/07/2017 20:58:10 PAGE 3   

 116          /*
 117           *********************************************************************************************************
 118           *      函 数 名: bsp_GetKeyState
 119           *      功能说明: 读取按键的状态
 120           *      形    参:  _ucKeyID : 按键ID，从0开始
 121           *      返 回 值: 1 表示按下， 0 表示未按下
 122           *********************************************************************************************************
 123           */
 124          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 125   1              return s_tBtn[_ucKeyID].State;
 126   1      }
 127          
 128          /*
 129           *********************************************************************************************************
 130           *      函 数 名: bsp_SetKeyParam
 131           *      功能说明: 设置按键参数
 132           *      形    参：_ucKeyID : 按键ID，从0开始
 133           *                      _LongTime : 长按事件时间
 134           *                       _RepeatSpeed : 连发速度
 135           *      返 回 值: 无
 136           *********************************************************************************************************
 137           */
 138          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 139   1              s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
 140   1              s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 141   1              s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 142   1      }
 143          
 144          /*
 145           *********************************************************************************************************
 146           *      函 数 名: bsp_ClearKey
 147           *      功能说明: 清空按键FIFO缓冲区
 148           *      形    参：无
 149           *      返 回 值: 按键代码
 150           *********************************************************************************************************
 151           */
 152          void bsp_ClearKey(void) {
 153   1              s_tKey.Read = s_tKey.Write;
 154   1      }
 155          
 156          /*
 157           *********************************************************************************************************
 158           *      函 数 名: bsp_InitKeyHard
 159           *      功能说明: 配置按键对应的GPIO
 160           *      形    参:  无
 161           *      返 回 值: 无
 162           *********************************************************************************************************
 163           */
 164          static void bsp_InitKeyHard(void) {
 165   1      #if 0
                      set_P3M1_0;
                      clr_P3M2_0;
              
                      set_P1M1_7;
                      P1M1 &= ~0x80;
              #else
 172   1              clr_P3M1_0;
 173   1              clr_P3M2_0;
 174   1      
 175   1              clr_P1M1_7;
 176   1              P1M1 &= ~0x80;
 177   1      
C51 COMPILER V9.56.0.0   BSP_KEY                                                           12/07/2017 20:58:10 PAGE 4   

 178   1              P30 = 1;
 179   1              P17 = 1;
 180   1      
 181   1      #endif
 182   1      }
 183          
 184          /*
 185           *********************************************************************************************************
 186           *      函 数 名: bsp_InitKeyVar
 187           *      功能说明: 初始化按键变量
 188           *      形    参:  无
 189           *      返 回 值: 无
 190           *********************************************************************************************************
 191           */
 192          static void bsp_InitKeyVar(void) {
 193   1              uint8_t i;
 194   1      
 195   1              /* 对按键FIFO读写指针清零 */
 196   1              s_tKey.Read = 0;
 197   1              s_tKey.Write = 0;
 198   1              s_tKey.Read2 = 0;
 199   1      
 200   1              /* 给每个按键结构体成员变量赋一组缺省值 */
 201   1              for (i = 0; i < KEY_COUNT; i++) {
 202   2                      s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 203   2                      s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 204   2                      s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 205   2                      //s_tBtn[i].KeyCodeDown = 3 * i + 1;                            /* 按键按下的键值代码 */
 206   2                      //s_tBtn[i].KeyCodeUp   = 3 * i + 2;                            /* 按键弹起的键值代码 */
 207   2                      //s_tBtn[i].KeyCodeLong = 3 * i + 3;                            /* 按键被持续按下的键值代码 */
 208   2                      s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 209   2                      s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 210   2              }
 211   1      
 212   1              /* 判断按键按下的函数 */
 213   1              s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 214   1              s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 215   1      
 216   1      }
 217          
 218          /*
 219           *********************************************************************************************************
 220           *      函 数 名: bsp_DetectKey
 221           *      功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 222           *      形    参:  按键结构变量指针
 223           *      返 回 值: 无
 224           *********************************************************************************************************
 225           */
 226          KEY_T *pBtn;
 227          static void bsp_DetectKey(uint8_t i) {
 228   1              pBtn = &s_tBtn[i];
 229   1              if (pBtn->IsKeyDownFunc()) {
 230   2                      if (pBtn->Count < KEY_FILTER_TIME) {
 231   3                              pBtn->Count = KEY_FILTER_TIME;
 232   3                      } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 233   3                              pBtn->Count++;
 234   3                      } else {
 235   3                              if (pBtn->State == 0) {
 236   4                                      pBtn->State = 1;
 237   4      
 238   4                                      /* 发送按钮按下的消息 */
 239   4                                      bsp_PutKey((uint8_t) (3 * i + 1));
C51 COMPILER V9.56.0.0   BSP_KEY                                                           12/07/2017 20:58:10 PAGE 5   

 240   4                              }
 241   3      
 242   3                              if (pBtn->LongTime > 0) {
 243   4                                      if (pBtn->LongCount < pBtn->LongTime) {
 244   5                                              /* 发送按钮持续按下的消息 */
 245   5                                              if (++pBtn->LongCount == pBtn->LongTime) {
 246   6                                                      /* 键值放入按键FIFO */
 247   6                                                      bsp_PutKey((uint8_t) (3 * i + 3));
 248   6                                              }
 249   5                                      } else {
 250   5                                              if (pBtn->RepeatSpeed > 0) {
 251   6                                                      if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 252   7                                                              pBtn->RepeatCount = 0;
 253   7                                                              /* 常按键后，每隔10ms发送1个按键 */
 254   7                                                              bsp_PutKey((uint8_t) (3 * i + 1));
 255   7                                                      }
 256   6                                              }
 257   5                                      }
 258   4                              }
 259   3                      }
 260   2              } else {
 261   2                      if (pBtn->Count > KEY_FILTER_TIME) {
 262   3                              pBtn->Count = KEY_FILTER_TIME;
 263   3                      } else if (pBtn->Count != 0) {
 264   3                              pBtn->Count--;
 265   3                      } else {
 266   3                              if (pBtn->State == 1) {
 267   4                                      pBtn->State = 0;
 268   4      
 269   4                                      /* 发送按钮弹起的消息 */
 270   4                                      bsp_PutKey((uint8_t) (3 * i + 2));
 271   4                              }
 272   3                      }
 273   2                      pBtn->LongCount = 0;
 274   2                      pBtn->RepeatCount = 0;
 275   2              }
 276   1      }
 277          
 278          /*
 279           *********************************************************************************************************
 280           *      函 数 名: bsp_KeyScan
 281           *      功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 282           *      形    参:  无
 283           *      返 回 值: 无
 284           *********************************************************************************************************
 285           */
 286          void bsp_KeyScan(void) {
 287   1              uint8_t i;
 288   1      
 289   1              for (i = 0; i < KEY_COUNT; i++) {
 290   2                      bsp_DetectKey(i);
 291   2              }
 292   1      }
 293          
 294          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    597    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3       2
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.56.0.0   BSP_KEY                                                           12/07/2017 20:58:10 PAGE 6   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =     35    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
