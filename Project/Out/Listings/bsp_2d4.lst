C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\bsp_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_2d4.lst) OBJEC
                    -T(.\Out\Objects\bsp_2d4.obj)

line level    source

   1          /*
   2           * bsp_bt.c
   3           *
   4           *  Created on: 2017年6月26日
   5           *      Author: fly
   6           */
   7          
   8          #include "bsp.h"
   9          
  10          void Wireless2d4_InitHard(void) {
  11   1      
  12   1              //SCK
  13   1              clr_P1M1_0;
  14   1              set_P1M2_0;
  15   1      
  16   1              //CSN
  17   1              clr_P1M1_1;
  18   1              set_P1M2_1;
  19   1      
  20   1              //TX
  21   1              clr_P0M1_0;
  22   1              set_P0M2_0;
  23   1      
  24   1      }
  25          
  26          const uint8_t TX_ADDRESS_DEF[5] = { 0xCC, 0xCC, 0xCC, 0xCC, 0xCC }; //RF 地址：接收端和发送端需一致
  27          
  28          /******************************************************************************/
  29          //            SPI_init
  30          //               init spi pin  input/out mode
  31          /******************************************************************************/
  32          void SPI_init(void) {
  33   1      //      GPIO_Init(GPIOB, GPIO_Pin_4, GPIO_Mode_Out_PP_High_Fast); //CSN PIN output High pulling push
  34   1      //      GPIO_Init(GPIOB, GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Fast); //SCK PIN output Low  pulling push
  35   1      //      GPIO_Init(GPIOB, GPIO_Pin_6, GPIO_Mode_Out_PP_High_Fast); //DATA PIN output  DEFAULT  High pulling push
  36   1      }
  37          
  38          /******************************************************************************/
  39          //           SPI_WW
  40          //                SPI Write a byte for write regiest
  41          /******************************************************************************/
  42          void SPI_WW(uint8_t R_REG) {
  43   1              uint8_t i;
  44   1              for (i = 0; i < 8; i++) {
  45   2                      SCK_LOW;
  46   2                      if (R_REG & 0x80) {
  47   3                              SPI_DATA_HIGH;
  48   3                      } else {
  49   3                              SPI_DATA_LOW;
  50   3                      }
  51   2                      R_REG <<= 1;
  52   2                      SCK_HIGH;
  53   2                      nop
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 2   

  54   2              }
  55   1              SCK_LOW;
  56   1      
  57   1      }
  58          
  59          /******************************************************************************/
  60          //            RF_WriteReg
  61          //                Write Data(1 Byte Address ,1 byte data)
  62          /******************************************************************************/
  63          void RF_WriteReg(uint8_t reg, uint8_t wdata) {
  64   1              CSN_LOW;
  65   1              nop
  66   1              SPI_WW(reg);
  67   1              SPI_WW(wdata);
  68   1              nop
  69   1              CSN_HIGH;
  70   1      }
  71          
  72          /******************************************************************************/
  73          //            RF_WriteBuf
  74          //                Write Buffer
  75          /******************************************************************************/
  76          void RF_WriteBuf(uint8_t reg, uint8_t *pBuf, uint8_t length) {
  77   1              uint8_t j;
  78   1              CSN_LOW;
  79   1              j = 0;
  80   1              SPI_WW(reg);
  81   1              for (j = 0; j < length; j++) {
  82   2                      SPI_WW(pBuf[j]);
  83   2              }
  84   1              j = 0;
  85   1              CSN_HIGH;
  86   1      }
  87          
  88          /******************************************************************************/
  89          //            SPI_WR
  90          //                SPI Write a byte for read regiset
  91          /******************************************************************************/
  92          void SPI_WR(uint8_t R_REG) {
  93   1              uint8_t i;
  94   1              for (i = 0; i < 8; i++) {
  95   2                      SCK_LOW;
  96   2                      if (R_REG & 0x80) {
  97   3                              SPI_DATA_HIGH;
  98   3                      } else {
  99   3                              SPI_DATA_LOW;
 100   3                      }
 101   2                      R_REG <<= 1;
 102   2                      SCK_HIGH;
 103   2                      nop
 104   2              }
 105   1              SPI_DATA_INPUT_MODE
 106   1              ;
 107   1              SCK_LOW;
 108   1      
 109   1      }
 110          
 111          /******************************************************************************/
 112          //            ucSPI_Read
 113          //                SPI Read BYTE
 114          /******************************************************************************/
 115          uint8_t ucSPI_Read(void) {
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 3   

 116   1              uint8_t i, dt;
 117   1              dt = 0;
 118   1              for (i = 0; i < 8; i++) {
 119   2                      SCK_LOW;
 120   2                      dt = dt << 1;
 121   2                      SCK_HIGH;
 122   2                      if (SPI_DATA_STATUS) {
 123   3                              dt |= 0x01;
 124   3                      }
 125   2              }
 126   1              SCK_LOW;
 127   1              return dt;
 128   1      }
 129          
 130          /******************************************************************************/
 131          //            ucRF_ReadReg
 132          //                Read Data(1 Byte Address ,1 byte data return)
 133          /******************************************************************************/
 134          uint8_t ucRF_ReadReg(uint8_t reg) {
 135   1              uint8_t dt;
 136   1      
 137   1              CSN_LOW;
 138   1              nop
 139   1              SPI_WR(reg);
 140   1              dt = ucSPI_Read();
 141   1              SPI_DATA_OUTPUT_MODE
 142   1              ;
 143   1              nop
 144   1              CSN_HIGH;
 145   1      
 146   1              return dt;
 147   1      }
 148          
 149          /******************************************************************************/
 150          //            RF_ReadBuf
 151          //                Read Data(1 Byte Address ,length byte data read)
 152          /******************************************************************************/
 153          void RF_ReadBuf(uint8_t reg, unsigned char *pBuf, uint8_t length) {
 154   1              uint8_t byte_ctr;
 155   1      
 156   1              CSN_LOW;
 157   1              SPI_WR(reg);
 158   1              for (byte_ctr = 0; byte_ctr < length; byte_ctr++)
 159   1                      pBuf[byte_ctr] = ucSPI_Read();
 160   1              SPI_DATA_OUTPUT_MODE
 161   1              ;
 162   1              CSN_HIGH;
 163   1      }
 164          
 165          /******************************************************************************/
 166          //            RF_TxMode
 167          //                Set RF into TX mode
 168          /******************************************************************************/
 169          void RF_TxMode(void) {
 170   1              CE_LOW;
 171   1              RF_WriteReg(W_REGISTER + CONFIG, 0X8E);                                         // 将RF设置成TX模式
 172   1      //      delay_10us(1);
 173   1              nop
 174   1              nop
 175   1              nop
 176   1              nop
 177   1              nop
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 4   

 178   1              nop
 179   1              nop
 180   1              nop
 181   1              nop
 182   1              nop
 183   1              nop
 184   1              nop
 185   1      }
 186          
 187          /******************************************************************************/
 188          //            RF_RxMode
 189          //            将RF设置成RX模式，准备接收数据
 190          /******************************************************************************/
 191          void RF_RxMode(void) {
 192   1              uint16_t i = 0;
 193   1              CE_LOW;
 194   1              RF_WriteReg(W_REGISTER + CONFIG, 0X8F);                                         // 将RF设置成RX模式
 195   1              CE_HIGH;                                                                                // Set CE pin high 开始接收数据
 196   1      //      delay_ms(2);
 197   1              for (i = 0; i < 2000; i++) {
 198   2                      nop
 199   2              }
 200   1      
 201   1      }
 202          
 203          /******************************************************************************/
 204          //            RF_GetStatus
 205          //            read RF IRQ status,3bits return
 206          /******************************************************************************/
 207          uint8_t ucRF_GetStatus(void) {
 208   1              return ucRF_ReadReg(STATUS) & 0x70;                                                             //读取RF的状态
 209   1      }
 210          /******************************************************************************/
 211          //            ucRF_GetRSSI
 212          //                读取rssi 值
 213          /******************************************************************************/
 214          uint8_t ucRF_GetRSSI(void) {
 215   1              return (ucRF_ReadReg(DATAOUT));                                                         //读取RF RSSI
 216   1      }
 217          /******************************************************************************/
 218          //            RF_ClearStatus
 219          //                clear RF IRQ
 220          /******************************************************************************/
 221          void RF_ClearStatus(void) {
 222   1              RF_WriteReg(W_REGISTER + STATUS, 0x70);                                                 //清除RF的IRQ标志
 223   1      }
 224          
 225          /******************************************************************************/
 226          //            RF_ClearFIFO
 227          //                clear RF TX/RX FIFO
 228          /******************************************************************************/
 229          void RF_ClearFIFO(void) {
 230   1              RF_WriteReg(FLUSH_TX, 0);                                               //清除RF 的 TX FIFO
 231   1              RF_WriteReg(FLUSH_RX, 0);                                   //清除RF 的 RX FIFO
 232   1      }
 233          
 234          /******************************************************************************/
 235          //            RF_SetChannel
 236          //                Set RF TX/RX channel:Channel
 237          /******************************************************************************/
 238          void RF_SetChannel(uint8_t Channel) {
 239   1              CE_LOW;
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 5   

 240   1              RF_WriteReg(W_REGISTER + RF_CH, Channel);
 241   1      }
 242          
 243          /******************************************************************************/
 244          //            发送数据：
 245          //            参数：
 246          //              1. ucPayload：需要发送的数据首地址
 247          //              2. length:  需要发送的数据长度
 248          //              length 通常等于 PAYLOAD_WIDTH
 249          /******************************************************************************/
 250          void RF_TxData(uint8_t *ucPayload, uint8_t length) {
 251   1              if (0 == ucRF_GetStatus()) {                             // rf free status
 252   2                      uint16_t i = 0;
 253   2                      RF_WriteBuf(W_TX_PAYLOAD, ucPayload, length);
 254   2                      CE_HIGH;                             //rf entery tx mode start send data
 255   2      //              delay_10us(60);                            //keep ce high at least 600us
 256   2                      for (i = 0; i < 200; i++) {
 257   3                              nop
 258   3                      }
 259   2                      CE_LOW;                                                 //rf entery stb3
 260   2              }
 261   1      }
 262          
 263          /******************************************************************************/
 264          //            ucRF_DumpRxData
 265          //            读出接收到的数据：
 266          //            参数：
 267          //              1. ucPayload：存储读取到的数据的Buffer
 268          //              2. length:    读取的数据长度
 269          //              Return:
 270          //              1. 0: 没有接收到数据
 271          //              2. 1: 读取接收到的数据成功
 272          //              note: Only use in Rx Mode
 273          //              length 通常等于 PAYLOAD_WIDTH
 274          /******************************************************************************/
 275          uint8_t ucRF_DumpRxData(uint8_t *ucPayload, uint8_t length) {
 276   1              if (ucRF_GetStatus() & RX_DR_FLAG) {
 277   2      
 278   2                      CE_LOW;
 279   2                      RF_ReadBuf(R_RX_PAYLOAD, ucPayload, length); //将接收到的数据读出到ucPayload，且清除rxfifo
 280   2                      RF_ClearFIFO();
 281   2                      RF_ClearStatus();                                                 //清除Status
 282   2                      CE_HIGH;                                                         //继续开始接
 283   2                      return 1;
 284   2              }
 285   1              return 0;
 286   1      }
 287          
 288          ////////////////////////////////////////////////////////////////////////////////
 289          
 290          //          以下部分与RF通信相关，不建议修改
 291          ////////////////////////////////////////////////////////////////////////////////
 292          /******************************************************************************/
 293          //            PN006_Initial
 294          //                Initial RF
 295          /******************************************************************************/
 296          
 297          void RF_Init(void) {
 298   1              uint8_t BB_cal_data[5] = { 0x0A, 0x6D, 0x67, 0x9C, 0x46 };
 299   1              uint8_t RF_cal_data[3] = { 0xF6, 0x37, 0x5D };
 300   1              uint8_t RF_cal2_data[6] = { 0x45, 0x21, 0xef, 0xAC, 0x5A, 0x50 };
 301   1              uint8_t Dem_cal_data[1] = { 0x01 };
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 6   

 302   1              uint8_t Dem_cal2_data[3] = { 0x0b, 0xDF, 0x02 };
 303   1              SPI_init();
 304   1              RF_WriteReg(RST_FSPI, 0x5A);                                                            //Software Reset
 305   1              RF_WriteReg(RST_FSPI, 0XA5);
 306   1      
 307   1              if (PAYLOAD_WIDTH < 33) {
 308   2                      RF_WriteReg(W_REGISTER + FEATURE, 0x20);//FIFO_LEN=32 BYTE  and enable Software control ce
 309   2              } else {
 310   2                      RF_WriteReg(W_REGISTER + FEATURE, 0x38);//FIFO_LEN=64 BYTE  and enable Software control ce
 311   2              }
 312   1              CE_LOW;
 313   1              RF_WriteReg(FLUSH_TX, 0);                                                                       // CLEAR TXFIFO
 314   1              RF_WriteReg(FLUSH_RX, 0);                                                                       // CLEAR  RXFIFO
 315   1              RF_WriteReg(W_REGISTER + STATUS, 0x70);                                         // CLEAR  STATUS
 316   1              RF_WriteReg(W_REGISTER + EN_RXADDR, 0x01);                                      // Enable Pipe0
 317   1              RF_WriteReg(W_REGISTER + SETUP_AW, 0x03);               // address witdth is 5 bytes
 318   1              RF_WriteReg(W_REGISTER + RF_CH, DEFAULT_CHANNEL);                // 2478M HZ
 319   1              RF_WriteReg(W_REGISTER + RX_PW_P0, PAYLOAD_WIDTH);                              // 8 bytes
 320   1              RF_WriteBuf(W_REGISTER + TX_ADDR, (uint8_t*) TX_ADDRESS_DEF,
 321   1                              sizeof(TX_ADDRESS_DEF));        // Writes TX_Address to PN006
 322   1              RF_WriteBuf(W_REGISTER + RX_ADDR_P0, (uint8_t*) TX_ADDRESS_DEF,
 323   1                              sizeof(TX_ADDRESS_DEF));        // RX_Addr0 same as TX_Adr for Auto.Ack
 324   1              RF_WriteBuf(W_REGISTER + BB_CAL, BB_cal_data, sizeof(BB_cal_data));
 325   1              RF_WriteBuf(W_REGISTER + RF_CAL2, RF_cal2_data, sizeof(RF_cal2_data));
 326   1              RF_WriteBuf(W_REGISTER + DEMOD_CAL, Dem_cal_data, sizeof(Dem_cal_data));
 327   1              RF_WriteBuf(W_REGISTER + RF_CAL, RF_cal_data, sizeof(RF_cal_data));
 328   1              RF_WriteBuf(W_REGISTER + DEM_CAL2, Dem_cal2_data, sizeof(Dem_cal2_data));
 329   1              RF_WriteReg(W_REGISTER + DYNPD, 0x00);
 330   1              RF_WriteReg(W_REGISTER + RF_SETUP, RF_POWER);                                           // 13DBM
 331   1      
 332   1      #if(TRANSMIT_TYPE == TRANS_ENHANCE_MODE)
                      RF_WriteReg(W_REGISTER + SETUP_RETR, 0x03);                                     //  3 retrans...
                      RF_WriteReg(W_REGISTER + EN_AA, 0x01);// Enable Auto.Ack:Pipe0
              #elif(TRANSMIT_TYPE == TRANS_BURST_MODE)
 336   1              RF_WriteReg(W_REGISTER + SETUP_RETR, 0x00);     // Disable retrans...
 337   1              RF_WriteReg(W_REGISTER + EN_AA, 0x00);  // Disable AutoAck
 338   1      #endif
 339   1      
 340   1      }
 341          
 342          /******************************************************************************/
 343          //                      进入载波模式
 344          /******************************************************************************/
 345          void RF_Carrier(uint8_t ucChannel_Set) {
 346   1              uint8_t i = 0;
 347   1              uint8_t BB_cal_data[5] = { 0x0A, 0x6D, 0x67, 0x9C, 0x46 };
 348   1              uint8_t RF_cal_data[3] = { 0xF6, 0x37, 0x5D };
 349   1              uint8_t RF_cal2_data[6] = { 0x45, 0x21, 0xEF, 0xAC, 0x5A, 0x50 };
 350   1              uint8_t Dem_cal_data[1] = { 0xE1 };
 351   1              uint8_t Dem_cal2_data[3] = { 0x0B, 0xDF, 0x02 };
 352   1      
 353   1              RF_WriteReg(RST_FSPI, 0x5A);                                                            //Software Reset
 354   1              RF_WriteReg(RST_FSPI, 0XA5);
 355   1              RF_WriteReg(W_REGISTER + FEATURE, 0x20);
 356   1              CE_LOW;
 357   1      //      delay_ms(200);
 358   1              for (i = 0; i < 220; i++) {
 359   2                      nop
 360   2                      nop
 361   2                      nop
 362   2                      nop
 363   2              }
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/30/2017 23:30:10 PAGE 7   

 364   1      
 365   1              RF_WriteReg(W_REGISTER + RF_CH, ucChannel_Set);                                         //单载波频点
 366   1              RF_WriteReg(W_REGISTER + RF_SETUP, RF_POWER);                                           //13dbm
 367   1              RF_WriteBuf(W_REGISTER + BB_CAL, BB_cal_data, sizeof(BB_cal_data));
 368   1              RF_WriteBuf(W_REGISTER + RF_CAL2, RF_cal2_data, sizeof(RF_cal2_data));
 369   1              RF_WriteBuf(W_REGISTER + DEMOD_CAL, Dem_cal_data, sizeof(Dem_cal_data));
 370   1              RF_WriteBuf(W_REGISTER + RF_CAL, RF_cal_data, sizeof(RF_cal_data));
 371   1              RF_WriteBuf(W_REGISTER + DEM_CAL2, Dem_cal2_data, sizeof(Dem_cal2_data));
 372   1      }
 373          
 374          /***************************************end of file ************************************/
*** WARNING C294 IN LINE 310 OF ..\Bsp\src\bsp_2d4.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1024    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =      5      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
