C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\bsp_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_2d4.lst) OBJEC
                    -T(.\Out\Objects\bsp_2d4.obj)

line level    source

   1          /*
   2           * bsp_bt.c
   3           *
   4           *  Created on: 2017年6月26日
   5           *      Author: fly
   6           */
   7          
   8          #include "bsp.h"
   9          
  10          void Wireless2d4_InitHard(void) {
  11   1      
  12   1              //SCK
  13   1              clr_P1M1_0;
  14   1              set_P1M2_0;
  15   1      
  16   1              //CSN
  17   1              clr_P1M1_1;
  18   1              set_P1M2_1;
  19   1      
  20   1              //TX
  21   1              clr_P0M1_0;
  22   1              set_P0M2_0;
  23   1      
  24   1      }
  25          
  26          const uint8_t TX_ADDRESS_DEF[5] = { 0xCC, 0xCC, 0xCC, 0xCC, 0xCC }; //RF 地址：接收端和发送端需一致
  27          
  28          /******************************************************************************/
  29          //            SPI_init
  30          //               init spi pin  input/out mode
  31          /******************************************************************************/
  32          void SPI_init(void) {
  33   1      //      GPIO_Init(GPIOB, GPIO_Pin_4, GPIO_Mode_Out_PP_High_Fast); //CSN PIN output High pulling push
  34   1      //      GPIO_Init(GPIOB, GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Fast); //SCK PIN output Low  pulling push
  35   1      //      GPIO_Init(GPIOB, GPIO_Pin_6, GPIO_Mode_Out_PP_High_Fast); //DATA PIN output  DEFAULT  High pulling push
  36   1      }
  37          
  38          /******************************************************************************/
  39          //           SPI_WW
  40          //                SPI Write a byte for write regiest
  41          /******************************************************************************/
  42          void SPI_WW(uint8_t R_REG) {
  43   1              uint8_t i;
  44   1              for (i = 0; i < 8; i++) {
  45   2                      SCK_LOW;
  46   2                      if (R_REG & 0x80) {
  47   3                              SPI_DATA_HIGH;
  48   3                      } else {
  49   3                              SPI_DATA_LOW;
  50   3                      }
  51   2                      R_REG = R_REG << 1;
  52   2      
  53   2                      SCK_HIGH;
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 2   

  54   2              }
  55   1              SCK_LOW;
  56   1      
  57   1      }
  58          
  59          /******************************************************************************/
  60          //            RF_WriteReg
  61          //                Write Data(1 Byte Address ,1 byte data)
  62          /******************************************************************************/
  63          void RF_WriteReg(uint8_t reg, uint8_t wdata) {
  64   1              CSN_LOW;
  65   1              SPI_WW(reg);
  66   1              SPI_WW(wdata);
  67   1              CSN_HIGH;
  68   1      }
  69          
  70          /******************************************************************************/
  71          //            RF_WriteBuf
  72          //                Write Buffer
  73          /******************************************************************************/
  74          void RF_WriteBuf(uint8_t reg, uint8_t *pBuf, uint8_t length) {
  75   1              uint8_t j;
  76   1              CSN_LOW;
  77   1              j = 0;
  78   1              SPI_WW(reg);
  79   1              for (j = 0; j < length; j++) {
  80   2                      SPI_WW(pBuf[j]);
  81   2              }
  82   1              j = 0;
  83   1              CSN_HIGH;
  84   1      }
  85          
  86          /******************************************************************************/
  87          //            SPI_WR
  88          //                SPI Write a byte for read regiset
  89          /******************************************************************************/
  90          void SPI_WR(uint8_t R_REG) {
  91   1              uint8_t i;
  92   1              for (i = 0; i < 8; i++) {
  93   2                      SCK_LOW;
  94   2                      if (R_REG & 0x80) {
  95   3                              SPI_DATA_HIGH;
  96   3                      } else {
  97   3                              SPI_DATA_LOW;
  98   3                      }
  99   2                      R_REG = R_REG << 1;
 100   2      
 101   2                      SCK_HIGH;
 102   2              }
 103   1              SPI_DATA_INPUT_MODE
 104   1              ;
 105   1              SCK_LOW;
 106   1      
 107   1      }
 108          
 109          /******************************************************************************/
 110          //            ucSPI_Read
 111          //                SPI Read BYTE
 112          /******************************************************************************/
 113          uint8_t ucSPI_Read(void) {
 114   1              uint8_t i, dt;
 115   1              dt = 0;
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 3   

 116   1              for (i = 0; i < 8; i++) {
 117   2                      SCK_LOW;
 118   2                      dt = dt << 1;
 119   2                      SCK_HIGH;
 120   2                      if (SPI_DATA_STATUS) {
 121   3                              dt |= 0x01;
 122   3                      }
 123   2              }
 124   1              SCK_LOW;
 125   1              return dt;
 126   1      }
 127          
 128          /******************************************************************************/
 129          //            ucRF_ReadReg
 130          //                Read Data(1 Byte Address ,1 byte data return)
 131          /******************************************************************************/
 132          uint8_t ucRF_ReadReg(uint8_t reg) {
 133   1              uint8_t dt;
 134   1      
 135   1              CSN_LOW;
 136   1              SPI_WR(reg);
 137   1              dt = ucSPI_Read();
 138   1              SPI_DATA_OUTPUT_MODE
 139   1              ;
 140   1              CSN_HIGH;
 141   1      
 142   1              return dt;
 143   1      }
 144          
 145          /******************************************************************************/
 146          //            RF_ReadBuf
 147          //                Read Data(1 Byte Address ,length byte data read)
 148          /******************************************************************************/
 149          void RF_ReadBuf(uint8_t reg, unsigned char *pBuf, uint8_t length) {
 150   1              uint8_t byte_ctr;
 151   1      
 152   1              CSN_LOW;
 153   1              SPI_WR(reg);
 154   1              for (byte_ctr = 0; byte_ctr < length; byte_ctr++)
 155   1                      pBuf[byte_ctr] = ucSPI_Read();
 156   1              SPI_DATA_OUTPUT_MODE
 157   1              ;
 158   1              CSN_HIGH;
 159   1      }
 160          
 161          /******************************************************************************/
 162          //            RF_TxMode
 163          //                Set RF into TX mode
 164          /******************************************************************************/
 165          void RF_TxMode(void) {
 166   1              CE_LOW;
 167   1              RF_WriteReg(W_REGISTER + CONFIG, 0X8E);                                         // 将RF设置成TX模式
 168   1      //      delay_10us(1);
 169   1              nop
 170   1              nop
 171   1      }
 172          
 173          /******************************************************************************/
 174          //            RF_RxMode
 175          //            将RF设置成RX模式，准备接收数据
 176          /******************************************************************************/
 177          void RF_RxMode(void) {
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 4   

 178   1              CE_LOW;
 179   1              RF_WriteReg(W_REGISTER + CONFIG, 0X8F);                                         // 将RF设置成RX模式
 180   1              CE_HIGH;                                                                                // Set CE pin high 开始接收数据
 181   1      //      delay_ms(2);
 182   1      
 183   1              nop
 184   1              nop
 185   1              nop
 186   1              nop
 187   1      }
 188          
 189          /******************************************************************************/
 190          //            RF_GetStatus
 191          //            read RF IRQ status,3bits return
 192          /******************************************************************************/
 193          uint8_t ucRF_GetStatus(void) {
 194   1              return ucRF_ReadReg(STATUS) & 0x70;                                                             //读取RF的状态
 195   1      }
 196          /******************************************************************************/
 197          //            ucRF_GetRSSI
 198          //                读取rssi 值
 199          /******************************************************************************/
 200          uint8_t ucRF_GetRSSI(void) {
 201   1              return (ucRF_ReadReg(DATAOUT));                                                         //读取RF RSSI
 202   1      }
 203          /******************************************************************************/
 204          //            RF_ClearStatus
 205          //                clear RF IRQ
 206          /******************************************************************************/
 207          void RF_ClearStatus(void) {
 208   1              RF_WriteReg(W_REGISTER + STATUS, 0x70);                                                 //清除RF的IRQ标志
 209   1      }
 210          
 211          /******************************************************************************/
 212          //            RF_ClearFIFO
 213          //                clear RF TX/RX FIFO
 214          /******************************************************************************/
 215          void RF_ClearFIFO(void) {
 216   1              RF_WriteReg(FLUSH_TX, 0);                                               //清除RF 的 TX FIFO
 217   1              RF_WriteReg(FLUSH_RX, 0);                                   //清除RF 的 RX FIFO
 218   1      }
 219          
 220          /******************************************************************************/
 221          //            RF_SetChannel
 222          //                Set RF TX/RX channel:Channel
 223          /******************************************************************************/
 224          void RF_SetChannel(uint8_t Channel) {
 225   1              CE_LOW;
 226   1              RF_WriteReg(W_REGISTER + RF_CH, Channel);
 227   1      }
 228          
 229          /******************************************************************************/
 230          //            发送数据：
 231          //            参数：
 232          //              1. ucPayload：需要发送的数据首地址
 233          //              2. length:  需要发送的数据长度
 234          //              length 通常等于 PAYLOAD_WIDTH
 235          /******************************************************************************/
 236          void RF_TxData(uint8_t *ucPayload, uint8_t length) {
 237   1              if (0 == ucRF_GetStatus())                                 // rf free status
 238   1                              {
 239   2                      RF_WriteBuf(W_TX_PAYLOAD, ucPayload, length);
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 5   

 240   2                      CE_HIGH;                             //rf entery tx mode start send data
 241   2      //              delay_10us(60);                            //keep ce high at least 600us
 242   2                      nop
 243   2                      nop
 244   2                      nop
 245   2                      nop
 246   2                      CE_LOW;                                                 //rf entery stb3
 247   2              }
 248   1      }
 249          
 250          /******************************************************************************/
 251          //            ucRF_DumpRxData
 252          //            读出接收到的数据：
 253          //            参数：
 254          //              1. ucPayload：存储读取到的数据的Buffer
 255          //              2. length:    读取的数据长度
 256          //              Return:
 257          //              1. 0: 没有接收到数据
 258          //              2. 1: 读取接收到的数据成功
 259          //              note: Only use in Rx Mode
 260          //              length 通常等于 PAYLOAD_WIDTH
 261          /******************************************************************************/
 262          uint8_t ucRF_DumpRxData(uint8_t *ucPayload, uint8_t length) {
 263   1              if (ucRF_GetStatus() & RX_DR_FLAG) {
 264   2      
 265   2                      CE_LOW;
 266   2                      RF_ReadBuf(R_RX_PAYLOAD, ucPayload, length); //将接收到的数据读出到ucPayload，且清除rxfifo
 267   2                      RF_ClearFIFO();
 268   2                      RF_ClearStatus();                                                 //清除Status
 269   2                      CE_HIGH;                                                         //继续开始接
 270   2                      return 1;
 271   2              }
 272   1              return 0;
 273   1      }
 274          
 275          ////////////////////////////////////////////////////////////////////////////////
 276          
 277          //          以下部分与RF通信相关，不建议修改
 278          ////////////////////////////////////////////////////////////////////////////////
 279          /******************************************************************************/
 280          //            PN006_Initial
 281          //                Initial RF
 282          /******************************************************************************/
 283          void RF_Init(void) {
 284   1              uint8_t BB_cal_data[] = { 0x0A, 0x6D, 0x67, 0x9C, 0x46 };
 285   1              uint8_t RF_cal_data[] = { 0xF6, 0x37, 0x5D };
 286   1              uint8_t RF_cal2_data[] = { 0x45, 0x21, 0xef, 0xAC, 0x5A, 0x50 };
 287   1              uint8_t Dem_cal_data[] = { 0x01 };
 288   1              uint8_t Dem_cal2_data[] = { 0x0b, 0xDF, 0x02 };
 289   1              SPI_init();
 290   1              RF_WriteReg(RST_FSPI, 0x5A);                                                            //Software Reset
 291   1              RF_WriteReg(RST_FSPI, 0XA5);
 292   1      
 293   1              if (PAYLOAD_WIDTH < 33) {
 294   2                      RF_WriteReg(W_REGISTER + FEATURE, 0x20);//FIFO_LEN=32 BYTE  and enable Software control ce
 295   2              } else {
 296   2                      RF_WriteReg(W_REGISTER + FEATURE, 0x38);//FIFO_LEN=64 BYTE  and enable Software control ce
 297   2              }
 298   1              CE_LOW;
 299   1              RF_WriteReg(FLUSH_TX, 0);                                                                       // CLEAR TXFIFO
 300   1              RF_WriteReg(FLUSH_RX, 0);                                                                       // CLEAR  RXFIFO
 301   1              RF_WriteReg(W_REGISTER + STATUS, 0x70);                                         // CLEAR  STATUS
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 6   

 302   1              RF_WriteReg(W_REGISTER + EN_RXADDR, 0x01);                                      // Enable Pipe0
 303   1              RF_WriteReg(W_REGISTER + SETUP_AW, 0x03);               // address witdth is 5 bytes
 304   1              RF_WriteReg(W_REGISTER + RF_CH, DEFAULT_CHANNEL);                // 2478M HZ
 305   1              RF_WriteReg(W_REGISTER + RX_PW_P0, PAYLOAD_WIDTH);                              // 8 bytes
 306   1              RF_WriteBuf(W_REGISTER + TX_ADDR, (uint8_t*) TX_ADDRESS_DEF,
 307   1                              sizeof(TX_ADDRESS_DEF));        // Writes TX_Address to PN006
 308   1              RF_WriteBuf(W_REGISTER + RX_ADDR_P0, (uint8_t*) TX_ADDRESS_DEF,
 309   1                              sizeof(TX_ADDRESS_DEF));        // RX_Addr0 same as TX_Adr for Auto.Ack
 310   1              RF_WriteBuf(W_REGISTER + BB_CAL, BB_cal_data, sizeof(BB_cal_data));
 311   1              RF_WriteBuf(W_REGISTER + RF_CAL2, RF_cal2_data, sizeof(RF_cal2_data));
 312   1              RF_WriteBuf(W_REGISTER + DEM_CAL, Dem_cal_data, sizeof(Dem_cal_data));
 313   1              RF_WriteBuf(W_REGISTER + RF_CAL, RF_cal_data, sizeof(RF_cal_data));
 314   1              RF_WriteBuf(W_REGISTER + DEM_CAL2, Dem_cal2_data, sizeof(Dem_cal2_data));
 315   1              RF_WriteReg(W_REGISTER + DYNPD, 0x00);
 316   1              RF_WriteReg(W_REGISTER + RF_SETUP, RF_POWER);                                           // 13DBM
 317   1      
 318   1      #if(TRANSMIT_TYPE == TRANS_ENHANCE_MODE)
                      RF_WriteReg(W_REGISTER + SETUP_RETR, 0x03);                                     //  3 retrans...
                      RF_WriteReg(W_REGISTER + EN_AA, 0x01);// Enable Auto.Ack:Pipe0
              #elif(TRANSMIT_TYPE == TRANS_BURST_MODE)
 322   1              RF_WriteReg(W_REGISTER + SETUP_RETR, 0x00);     // Disable retrans...
 323   1              RF_WriteReg(W_REGISTER + EN_AA, 0x00);  // Disable AutoAck
 324   1      #endif
 325   1      
 326   1      }
 327          
 328          /******************************************************************************/
 329          //                      进入载波模式
 330          /******************************************************************************/
 331          void RF_Carrier(uint8_t ucChannel_Set) {
 332   1              uint8_t BB_cal_data[] = { 0x0A, 0x6D, 0x67, 0x9C, 0x46 };
 333   1              uint8_t RF_cal_data[] = { 0xF6, 0x37, 0x5D };
 334   1              uint8_t RF_cal2_data[] = { 0x45, 0x21, 0xEF, 0xAC, 0x5A, 0x50 };
 335   1              uint8_t Dem_cal_data[] = { 0xE1 };
 336   1              uint8_t Dem_cal2_data[] = { 0x0B, 0xDF, 0x02 };
 337   1      
 338   1              RF_WriteReg(RST_FSPI, 0x5A);                                                            //Software Reset
 339   1              RF_WriteReg(RST_FSPI, 0XA5);
 340   1              RF_WriteReg(W_REGISTER + FEATURE, 0x20);
 341   1              CE_LOW;
 342   1      //      delay_ms(200);
 343   1              nop
 344   1              nop
 345   1              nop
 346   1              nop
 347   1              RF_WriteReg(W_REGISTER + RF_CH, ucChannel_Set);                                         //单载波频点
 348   1              RF_WriteReg(W_REGISTER + RF_SETUP, RF_POWER);                                           //13dbm
 349   1              RF_WriteBuf(W_REGISTER + BB_CAL, BB_cal_data, sizeof(BB_cal_data));
 350   1              RF_WriteBuf(W_REGISTER + RF_CAL2, RF_cal2_data, sizeof(RF_cal2_data));
 351   1              RF_WriteBuf(W_REGISTER + DEM_CAL, Dem_cal_data, sizeof(Dem_cal_data));
 352   1              RF_WriteBuf(W_REGISTER + RF_CAL, RF_cal_data, sizeof(RF_cal_data));
 353   1              RF_WriteBuf(W_REGISTER + DEM_CAL2, Dem_cal2_data, sizeof(Dem_cal2_data));
 354   1      }
 355          
 356          /***************************************end of file ************************************/
*** WARNING C294 IN LINE 296 OF ..\Bsp\src\bsp_2d4.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    951    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =      5      47
C51 COMPILER V9.56.0.0   BSP_2D4                                                           08/18/2017 23:11:05 PAGE 7   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
