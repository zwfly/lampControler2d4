C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SIZE) BROWSE INCDIR(..\Common\inc;
                    -..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) TABS(2
                    -) OBJECT(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          #include "app.h"
   8          #include <string.h>
   9          #include <ctype.h>
  10          
  11          #include "app_2d4.h"
  12          
  13          static uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  14          static uint8_t rcvBuf[PAYLOAD_WIDTH] = { 0 };
  15          uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  16          
  17          uint8_t tmpBuf[8] = { 0 };
  18          
  19          //static uint8_t test_vol = 0;
  20          //static uint8_t test_yinxiang_status = 0;
  21          
  22          void app_2d4_init(void) {
  23   1      
  24   1        sendRcv_flag = 0;
  25   1        memset(rcvBuf, 0, sizeof(rcvBuf));
  26   1        memset(sendBuf, 0, sizeof(sendBuf));
  27   1      
  28   1        RF_Init();
  29   1      #if 1
  30   1      
  31   1        RF_RxMode();
  32   1      #else
                RF_TxMode();
                sendRcv_flag = 1;
              #endif
  36   1      
  37   1      //  RF_Carrier(1);
  38   1      
  39   1      }
  40          
  41          void app_2d4_send(uint8_t *d, uint8_t len) {
  42   1      //  if (len > PAYLOAD_WIDTH) {
  43   1      //    return;
  44   1      //  }
  45   1        uint16_t i = 0;
  46   1        for (i = 0; i < 20; i++) {
  47   2          nop
  48   2          nop
  49   2          nop
  50   2      //    nop
  51   2        }
  52   1        RF_TxMode();
  53   1        sendRcv_flag = 1;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 2   

  54   1      
  55   1        for (i = 0; i < 200; i++) {
  56   2          nop
  57   2          nop
  58   2          nop
  59   2          nop
  60   2        }
  61   1      
  62   1        if (sendBuf != d) {
  63   2          memset(sendBuf, 0, PAYLOAD_WIDTH);
  64   2          memcpy(sendBuf, d, len);
  65   2        }
  66   1      }
  67          #if DEBUG
              idata char sss[32] = {0};
              #endif
  70          static void app_2d4_Rcv(uint8_t *buf) {
  71   1        uint8_t tmp = 0;
  72   1        uint8_t i = 0;
  73   1        uint8_t index = 0;
  74   1        uint8_t check = 0;
  75   1      #if DEBUG
                sprintf(sss, "rcv %02X %02X %02X %02X %02X %02X\r\n", (uint16_t) buf[0],
                    (uint16_t) buf[1], (uint16_t) buf[2], (uint16_t) buf[3],
                    (uint16_t) buf[4], (uint16_t) buf[5]);
                printf(sss);
              #endif
  81   1        if (buf[0] != LCD2LAMP_HEADER) {
  82   2          return;
  83   2        }
  84   1        if (buf[1] > sizeof(rcvBuf)) {
  85   2          return;
  86   2        }
  87   1        for (i = 0; i < (buf[1] + 1); i++) {
  88   2          check += buf[i + 1];
  89   2        }
  90   1        if (check != buf[buf[1] + 2]) {
  91   2          return;
  92   2        }
  93   1      
  94   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
  95   1        index = 0;
  96   1        switch (buf[2]) {
  97   2        case KEY_POWER_SHORT_CMD:
  98   2      //    if (g_tWork.status.bits.DOME) {
  99   2      //      if (g_tWork.status.bits.pause) {
 100   2      //        g_tWork.status.bits.pause = 0;
 101   2      //        app_dome_start_current();
 102   2      //      } else {
 103   2      //        g_tWork.status.bits.pause = 1;
 104   2      //        app_dome_stop_current();
 105   2      //      }
 106   2      //      sendBuf[index++] = LAMP2LCD_HEADER;
 107   2      //      sendBuf[index++] = 10;
 108   2      //      sendBuf[index++] = KEY_POWER_SHORT_CMD;
 109   2      //      sendBuf[index++] = g_tWork.status.bits.pause;
 110   2      //      app_dome_get_current_Name(sendBuf + index, 8);
 111   2      //      index += 8;
 112   2      //      for (i = 0; i < (sendBuf[1] + 1); i++) {
 113   2      //        sendBuf[index] += sendBuf[i + 1];
 114   2      //      }
 115   2      //      index++;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 3   

 116   2      //      app_2d4_send(sendBuf, index);
 117   2      //
 118   2      //    } else {
 119   2          app_uart_send(KEY_POWER_SHORT_CMD, 0, 0);
 120   2      //    }
 121   2          break;
 122   2      #if 0
                  case POWER_LONG_CMD:
              #if 0
                  if (buf[3] == 1) {
                    test_yinxiang_status = 1;
                  } else if (buf[3] == 2) {
                    test_yinxiang_status = 0;
                  } else if (buf[3] == 3) {
                    if (test_yinxiang_status) {
                      test_yinxiang_status = 0;
                    } else {
                      test_yinxiang_status = 1;
                    }
                  }
                  sendBuf[index++] = LAMP2LCD_HEADER;
                  sendBuf[index++] = 0x02;
                  sendBuf[index++] = buf[2];
                  sendBuf[index++] = test_yinxiang_status;
                  for (i = 0; i < (sendBuf[1] + 1); i++) {
                    sendBuf[index] += sendBuf[i + 1];
                  }
              #else
                  //  tmp = 0x03;
                  //  app_uart_send(POWER_LONG_UART_CMD, &tmp, 1);
              
              #endif
                  break;
              #endif
 150   2        case KEY_ACC_CMD:
 151   2          if (buf[3] == 1) {
 152   3            Relay_on();
 153   3          } else if (buf[3] == 2) {
 154   3            Relay_off();
 155   3          } else if (buf[3] == 3) {
 156   3            Relay_toggle();
 157   3          }
 158   2          sendBuf[index++] = LAMP2LCD_HEADER;
 159   2          sendBuf[index++] = 0x02;
 160   2          sendBuf[index++] = buf[2];
 161   2          if (Relay_IsOn()) {
 162   3            sendBuf[index++] = 0x01;
 163   3          } else {
 164   3            sendBuf[index++] = 0x02;
 165   3          }
 166   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 167   3            sendBuf[index] += sendBuf[i + 1];
 168   3          }
 169   2          break;
 170   2        case KEY_UP_CMD:
 171   2          if (g_tWork.status.bits.DOME) {
 172   3            g_tWork.status.bits.DEMO = 0;
 173   3            app_dome_start_current();
 174   3            if (g_tWork.status.bits.blinkEnable) {
 175   4              app_dome_previous();
 176   4              sendBuf[index++] = LAMP2LCD_HEADER;
 177   4              sendBuf[index++] = 9;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 4   

 178   4              sendBuf[index++] = KEY_UP_CMD;
 179   4              app_dome_get_current_Name(sendBuf + index, 8);
 180   4              index += 8;
 181   4              for (i = 0; i < (sendBuf[1] + 1); i++) {
 182   5                sendBuf[index] += sendBuf[i + 1];
 183   5              }
 184   4              index++;
 185   4              app_2d4_send(sendBuf, index);
 186   4            }
 187   3          } else {
 188   3            app_uart_send(KEY_UP_CMD, 0, 0);
 189   3          }
 190   2          break;
 191   2        case KEY_DOWN_CMD:
 192   2          if (g_tWork.status.bits.DOME) {
 193   3            g_tWork.status.bits.DEMO = 0;
 194   3            app_dome_start_current();
 195   3            if (g_tWork.status.bits.blinkEnable) {
 196   4              app_dome_next();
 197   4              sendBuf[index++] = LAMP2LCD_HEADER;
 198   4              sendBuf[index++] = 9;
 199   4              sendBuf[index++] = KEY_DOWN_CMD;
 200   4              app_dome_get_current_Name(sendBuf + index, 8);
 201   4              index += 8;
 202   4              for (i = 0; i < (sendBuf[1] + 1); i++) {
 203   5                sendBuf[index] += sendBuf[i + 1];
 204   5              }
 205   4              index++;
 206   4              app_2d4_send(sendBuf, index);
 207   4            }
 208   3          } else {
 209   3            app_uart_send(KEY_DOWN_CMD, 0, 0);
 210   3          }
 211   2          break;
 212   2        case RCV_PREV_NEXT_CMD:
 213   2      
 214   2          break;
 215   2        case KEY_DOME_CMD:
 216   2      
 217   2      //    tmp = 0x03;
 218   2      //    app_uart_send(DOME_UART_CMD, &tmp, 1);
 219   2      #if 1
 220   2          if (g_tWork.status.bits.DOME) {
 221   3            g_tWork.status.bits.DOME = 0;
 222   3          } else {
 223   3            g_tWork.status.bits.DOME = 1;
 224   3            g_tWork.status.bits.blinkEnable = 1;
 225   3            app_dome_start(0);
 226   3          }
 227   2      #else
                  g_tWork.status.bits.DOME = 0;
              #endif
 230   2      
 231   2          sendBuf[index++] = LAMP2LCD_HEADER;
 232   2          sendBuf[index++] = 11;
 233   2          sendBuf[index++] = KEY_DOME_CMD;
 234   2          sendBuf[index++] = g_tWork.status.bits.DOME;
 235   2          if (g_tWork.status.bits.blinkEnable) {
 236   3            sendBuf[index++] = 0;
 237   3          } else {
 238   3            sendBuf[index++] = 1;
 239   3          }
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 5   

 240   2          app_dome_get_current_Name(sendBuf + index, 8);
 241   2          for (i = 0; i < 8; i++) {
 242   3            if ((*(sendBuf + index + i) == 0)
 243   3                || (*(sendBuf + index + i) == 0xFF)) {
 244   4              *(sendBuf + index + i) = ' ';
 245   4            }
 246   3          }
 247   2          index += 8;
 248   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 249   3            sendBuf[index] += sendBuf[i + 1];
 250   3          }
 251   2          index++;
 252   2          app_2d4_send(sendBuf, index);
 253   2          break;
 254   2        case KEY_VOL_ADD_CMD:
 255   2          app_uart_send(KEY_VOL_ADD_CMD, 0, 0);
 256   2          break;
 257   2        case KEY_VOL_MINUS_CMD:
 258   2          app_uart_send(KEY_VOL_MINUS_CMD, 0, 0);
 259   2          break;
 260   2        case KEY_PLAY_SHORT_CMD:
 261   2          app_uart_send(KEY_PLAY_SHORT_CMD, 0, 0);
 262   2          break;
 263   2        case KEY_PLAY_LONG_CMD:
 264   2          app_uart_send(KEY_PLAY_LONG_CMD, 0, 0);
 265   2          break;
 266   2        case KEY_MODE_CMD:
 267   2          app_uart_send(KEY_MODE_CMD, 0, 0);
 268   2          break;
 269   2          /// card --start
 270   2        case KEY_CARD_MODE_POWER_CMD:
 271   2          app_uart_send(KEY_MODE_CMD, 0, 0);
 272   2          break;
 273   2        case KEY_CARD_MODE_POWER_LONG_CMD:
 274   2          app_uart_send(KEY_POWER_SHORT_CMD, 0, 0);
 275   2          break;
 276   2        case KEY_CARD_PREV_VOL_MINUS_CMD:
 277   2          app_uart_send(KEY_UP_CMD, 0, 0);
 278   2          break;
 279   2        case KEY_CARD_PREV_VOL_MINUS_LONG_CMD:
 280   2          app_uart_send(KEY_VOL_MINUS_CMD, 0, 0);
 281   2          break;
 282   2        case KEY_CARD_PLAY_BT_CALL_CMD:
 283   2          app_uart_send(KEY_PLAY_SHORT_CMD, 0, 0);
 284   2          break;
 285   2        case KEY_CARD_PLAY_BT_CALL_LONG_CMD:
 286   2      
 287   2          break;
 288   2        case KEY_CARD_NEXT_VOL_ADD_CMD:
 289   2          app_uart_send(KEY_DOWN_CMD, 0, 0);
 290   2          break;
 291   2        case KEY_CARD_NEXT_VOL_ADD_LONG_CMD:
 292   2          app_uart_send(KEY_VOL_ADD_CMD, 0, 0);
 293   2          break;
 294   2        case KEY_CARD_POWER_CMD:
 295   2          if (g_tWork.status.bits.blinkEnable == 0) {
 296   3            g_tWork.status.bits.blinkEnable = 1;
 297   3            app_dome_start_current();
 298   3          } else {
 299   3            g_tWork.status.bits.blinkEnable = 0;
 300   3            app_dome_stop_current();
 301   3          }
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 6   

 302   2          sendBuf[index++] = LAMP2LCD_HEADER;
 303   2          sendBuf[index++] = 10;
 304   2          sendBuf[index++] = KEY_POWER_SHORT_CMD;
 305   2          if (g_tWork.status.bits.blinkEnable) {
 306   3            sendBuf[index++] = 0;
 307   3          } else {
 308   3            sendBuf[index++] = 1;
 309   3          }
 310   2          app_dome_get_current_Name(sendBuf + index, 8);
 311   2      #if 1
 312   2          for (i = 0; i < 8; i++) {
 313   3            if ((*(sendBuf + index + i) == 0)
 314   3                || (*(sendBuf + index + i) == 0xFF)) {
 315   4              *(sendBuf + index + i) = ' ';
 316   4            }
 317   3          }
 318   2      #endif
 319   2          index += 8;
 320   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 321   3            sendBuf[index] += sendBuf[i + 1];
 322   3          }
 323   2          index++;
 324   2          app_2d4_send(sendBuf, index);
 325   2          break;
 326   2        case KEY_CARD_MODE_ADD_CMD:
 327   2          g_tWork.status.bits.DEMO = 0;
 328   2          app_dome_start_current();
 329   2          app_dome_next();
 330   2          break;
 331   2        case KEY_CARD_SPEED_ADD_CMD:
 332   2          if (dome_running_param.speed <= 100) {
 333   3            dome_running_param.speed += 10;
 334   3            if (dome_running_param.speed >= 100) {
 335   4              dome_running_param.speed = 100;
 336   4            }
 337   3          }
 338   2          break;
 339   2        case KEY_CARD_DEMO_CMD:
 340   2      //    if (g_tWork.status.bits.DEMO) {
 341   2      //      g_tWork.status.bits.DEMO = 0;
 342   2      //    } else {
 343   2          g_tWork.status.bits.DEMO = 1;
 344   2      //    }
 345   2          app_dome_start(0);
 346   2          break;
 347   2        case KEY_CARD_SPEED_MINUS_CMD:
 348   2          if (dome_running_param.speed >= 10) {
 349   3            dome_running_param.speed -= 10;
 350   3          }
 351   2          break;
 352   2        case KEY_CARD_COLOR_ADD_CMD:
 353   2          app_color_blink_next();
 354   2          break;
 355   2        case KEY_CARD_MODE_CMD:
 356   2      
 357   2          g_tWork.status.bits.DEMO = 0;
 358   2          app_dome_start_current();
 359   2          app_dome_previous();
 360   2          break;
 361   2        case KEY_CARD_BRIGHT_ADD_CMD:
 362   2          if (dome_running_param.bright <= 100) {
 363   3            dome_running_param.bright += 10;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 7   

 364   3            if (dome_running_param.bright >= 100) {
 365   4              dome_running_param.bright = 100;
 366   4            }
 367   3          }
 368   2          Light_bright_set(dome_running_param.bright);
 369   2          break;
 370   2        case KEY_CARD_COLOR_MINUS_CMD:
 371   2          app_color_blink_previous();
 372   2          break;
 373   2        case KEY_CARD_BRIGHT_MINUS_CMD:
 374   2          if (dome_running_param.bright >= 10) {
 375   3            dome_running_param.bright -= 10;
 376   3          }
 377   2          Light_bright_set(dome_running_param.bright);
 378   2      
 379   2          break;
 380   2        case KEY_CARD_NUM_1_CMD:
 381   2          Relay_toggle();
 382   2          sendBuf[index++] = LAMP2LCD_HEADER;
 383   2          sendBuf[index++] = 0x02;
 384   2          sendBuf[index++] = KEY_ACC_CMD;
 385   2          if (Relay_IsOn()) {
 386   3            sendBuf[index++] = 0x01;
 387   3          } else {
 388   3            sendBuf[index++] = 0x02;
 389   3          }
 390   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 391   3            sendBuf[index] += sendBuf[i + 1];
 392   3          }
 393   2          break;
 394   2        case KEY_CARD_NUM_1_LONG_CMD:
 395   2          break;
 396   2        case KEY_CARD_NUM_2_CMD:
 397   2      
 398   2      //    Repeat_Start(5,1,1);
 399   2      
 400   2          break;
 401   2        case KEY_CARD_NUM_3_CMD:
 402   2          break;
 403   2        case KEY_CARD_NUM_4_CMD:
 404   2          break;
 405   2      
 406   2          /// card --end
 407   2        }
 408   1        if (index) {
 409   2          index++;
 410   2          app_2d4_send(sendBuf, index);
 411   2        }
 412   1      
 413   1      }
 414          
 415          void app_2d4_pro(void) {
 416   1      
 417   1        if (sendRcv_flag) {
 418   2      
 419   2          switch (ucRF_GetStatus()) {
 420   3          case TX_DS_FLAG:    // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 421   3      
 422   3            RF_ClearFIFO();
 423   3            RF_ClearStatus();
 424   3      
 425   3            sendRcv_flag = 0;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:20 PAGE 8   

 426   3            RF_RxMode();
 427   3      
 428   3      //      Relay_toggle();
 429   3      
 430   3            break;
 431   3          case RX_DR_FLAG:    //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 432   3      
 433   3            RF_ClearFIFO();
 434   3            RF_ClearStatus();
 435   3            break;
 436   3          case MAX_RT_FLAG:   // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 437   3      
 438   3            RF_ClearFIFO();
 439   3            RF_ClearStatus();
 440   3            break;
 441   3          default:    // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 442   3      
 443   3            RF_TxData(sendBuf, sizeof(sendBuf));
 444   3      
 445   3            break;
 446   3          }
 447   2      
 448   2        } else {
 449   2          if (ucRF_DumpRxData(rcvBuf, sizeof(rcvBuf))) {
 450   3            app_2d4_Rcv(rcvBuf);
 451   3          }
 452   2        }
 453   1      }
 454          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2271    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     41      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
