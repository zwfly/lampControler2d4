C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          #include "app.h"
   8          #include <string.h>
   9          #include <ctype.h>
  10          
  11          #include "app_2d4.h"
  12          
  13          static uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  14          static uint8_t rcvBuf[PAYLOAD_WIDTH] = { 0 };
  15          uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  16          
  17          uint8_t tmpBuf[8] = { 0 };
  18          
  19          //static uint8_t test_vol = 0;
  20          //static uint8_t test_yinxiang_status = 0;
  21          
  22          void app_2d4_init(void) {
  23   1      
  24   1              sendRcv_flag = 0;
  25   1              memset(rcvBuf, 0, sizeof(rcvBuf));
  26   1              memset(sendBuf, 0, sizeof(sendBuf));
  27   1      
  28   1              RF_Init();
  29   1      #if 1
  30   1      
  31   1              RF_RxMode();
  32   1      #else
                      RF_TxMode();
                      sendRcv_flag = 1;
              #endif
  36   1      
  37   1      //      RF_Carrier(1);
  38   1      
  39   1      }
  40          
  41          void app_2d4_send(uint8_t *d, uint8_t len) {
  42   1      //      if (len > PAYLOAD_WIDTH) {
  43   1      //              return;
  44   1      //      }
  45   1              uint8_t i = 0;
  46   1              for (i = 0; i < 120; i++) {
  47   2                      nop
  48   2                      nop
  49   2                      nop
  50   2                      nop
  51   2              }
  52   1              RF_TxMode();
  53   1              sendRcv_flag = 1;
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 2   

  54   1      
  55   1              for (i = 0; i < 120; i++) {
  56   2                      nop
  57   2                      nop
  58   2                      nop
  59   2                      nop
  60   2              }
  61   1      
  62   1              if (sendBuf != d) {
  63   2                      memset(sendBuf, 0, PAYLOAD_WIDTH);
  64   2                      memcpy(sendBuf, d, len);
  65   2              }
  66   1      
  67   1      }
  68          #if DEBUG
              idata char sss[32] = {0};
              #endif
  71          static void app_2d4_Rcv(uint8_t *buf) {
  72   1              uint8_t tmp = 0;
  73   1              uint8_t i = 0;
  74   1              uint8_t index = 0;
  75   1              uint8_t check = 0;
  76   1      #if DEBUG
                      sprintf(sss, "rcv %02X %02X %02X %02X %02X %02X\r\n", (uint16_t) buf[0],
                                      (uint16_t) buf[1], (uint16_t) buf[2], (uint16_t) buf[3],
                                      (uint16_t) buf[4], (uint16_t) buf[5]);
                      printf(sss);
              #endif
  82   1              if (buf[0] != LCD2LAMP_HEADER) {
  83   2                      return;
  84   2              }
  85   1              if (buf[1] > sizeof(rcvBuf)) {
  86   2                      return;
  87   2              }
  88   1              for (i = 0; i < (buf[1] + 1); i++) {
  89   2                      check += buf[i + 1];
  90   2              }
  91   1              if (check != buf[buf[1] + 2]) {
  92   2                      return;
  93   2              }
  94   1      
  95   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
  96   1              index = 0;
  97   1              switch (buf[2]) {
  98   2              case KEY_POWER_SHORT_CMD:
  99   2                      if (g_tWork.status.bits.DOME) {
 100   3                              if (g_tWork.status.bits.pause) {
 101   4                                      g_tWork.status.bits.pause = 0;
 102   4                                      app_dome_start_current();
 103   4                              } else {
 104   4                                      g_tWork.status.bits.pause = 1;
 105   4                                      app_dome_stop_current();
 106   4                              }
 107   3                              sendBuf[index++] = LAMP2LCD_HEADER;
 108   3                              sendBuf[index++] = 10;
 109   3                              sendBuf[index++] = KEY_POWER_SHORT_CMD;
 110   3      //                      sendBuf[index++] = 0x05;
 111   3                              sendBuf[index++] = g_tWork.status.bits.pause;
 112   3                              app_dome_get_current_Name(sendBuf + index, 8);
 113   3                              index += 8;
 114   3                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 115   4                                      sendBuf[index] += sendBuf[i + 1];
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 3   

 116   4                              }
 117   3                              index++;
 118   3                              app_2d4_send(sendBuf, index);
 119   3      
 120   3                      } else {
 121   3                              app_uart_send(KEY_POWER_SHORT_CMD, 0, 0);
 122   3                      }
 123   2      
 124   2      #if 0
                              if (g_tWork.status.bits.DOME) {
                                      g_tWork.status.bits.DOME = 0;
              
                                      sendBuf[index++] = LAMP2LCD_HEADER;
                                      sendBuf[index++] = 11;
                                      sendBuf[index++] = KEY_POWER_SHORT_CMD;
                                      sendBuf[index++] = g_tWork.status.bits.DOME;
                                      sendBuf[index++] = g_tWork.status.bits.pause;
                                      app_dome_get_current_Name(sendBuf + index, 8);
                                      index += 8;
                                      for (i = 0; i < (sendBuf[1] + 1); i++) {
                                              sendBuf[index] += sendBuf[i + 1];
                                      }
                                      index++;
                                      app_2d4_send(sendBuf, index);
                              } else {
                                      app_uart_send(KEY_POWER_SHORT_CMD, 0, 0);
                              }
              #endif
 144   2                      break;
 145   2      #if 0
                              case POWER_LONG_CMD:
              #if 0
                              if (buf[3] == 1) {
                                      test_yinxiang_status = 1;
                              } else if (buf[3] == 2) {
                                      test_yinxiang_status = 0;
                              } else if (buf[3] == 3) {
                                      if (test_yinxiang_status) {
                                              test_yinxiang_status = 0;
                                      } else {
                                              test_yinxiang_status = 1;
                                      }
                              }
                              sendBuf[index++] = LAMP2LCD_HEADER;
                              sendBuf[index++] = 0x02;
                              sendBuf[index++] = buf[2];
                              sendBuf[index++] = test_yinxiang_status;
                              for (i = 0; i < (sendBuf[1] + 1); i++) {
                                      sendBuf[index] += sendBuf[i + 1];
                              }
              #else
                              //      tmp = 0x03;
                              //      app_uart_send(POWER_LONG_UART_CMD, &tmp, 1);
              
              #endif
                              break;
              #endif
 173   2              case KEY_ACC_CMD:
 174   2                      if (buf[3] == 1) {
 175   3                              Relay_on();
 176   3                      } else if (buf[3] == 2) {
 177   3                              Relay_off();
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 4   

 178   3                      } else if (buf[3] == 3) {
 179   3                              Relay_toggle();
 180   3                      }
 181   2                      sendBuf[index++] = LAMP2LCD_HEADER;
 182   2                      sendBuf[index++] = 0x02;
 183   2                      sendBuf[index++] = buf[2];
 184   2                      if (Relay_IsOn()) {
 185   3                              sendBuf[index++] = 0x01;
 186   3                      } else {
 187   3                              sendBuf[index++] = 0x02;
 188   3                      }
 189   2                      for (i = 0; i < (sendBuf[1] + 1); i++) {
 190   3                              sendBuf[index] += sendBuf[i + 1];
 191   3                      }
 192   2                      break;
 193   2              case KEY_UP_CMD:
 194   2                      if (g_tWork.status.bits.DOME) {
 195   3                              if (g_tWork.status.bits.pause == 0) {
 196   4                                      app_dome_previous();
 197   4                                      sendBuf[index++] = LAMP2LCD_HEADER;
 198   4                                      sendBuf[index++] = 9;
 199   4                                      sendBuf[index++] = KEY_UP_CMD;
 200   4      //                              sendBuf[index++] = 0x05;
 201   4                                      app_dome_get_current_Name(sendBuf + index, 8);
 202   4                                      index += 8;
 203   4                                      for (i = 0; i < (sendBuf[1] + 1); i++) {
 204   5                                              sendBuf[index] += sendBuf[i + 1];
 205   5                                      }
 206   4                                      index++;
 207   4                                      app_2d4_send(sendBuf, index);
 208   4                              }
 209   3                      } else {
 210   3                              app_uart_send(KEY_UP_CMD, 0, 0);
 211   3                      }
 212   2                      break;
 213   2              case KEY_DOWN_CMD:
 214   2                      if (g_tWork.status.bits.DOME) {
 215   3                              if (g_tWork.status.bits.pause == 0) {
 216   4                                      app_dome_next();
 217   4                                      sendBuf[index++] = LAMP2LCD_HEADER;
 218   4                                      sendBuf[index++] = 9;
 219   4                                      sendBuf[index++] = KEY_DOWN_CMD;
 220   4      //                              sendBuf[index++] = 0x05;
 221   4                                      app_dome_get_current_Name(sendBuf + index, 8);
 222   4                                      index += 8;
 223   4                                      for (i = 0; i < (sendBuf[1] + 1); i++) {
 224   5                                              sendBuf[index] += sendBuf[i + 1];
 225   5                                      }
 226   4                                      index++;
 227   4                                      app_2d4_send(sendBuf, index);
 228   4                              }
 229   3                      } else {
 230   3                              app_uart_send(KEY_DOWN_CMD, 0, 0);
 231   3                      }
 232   2                      break;
 233   2              case KEY_DOME_CMD:
 234   2      
 235   2      //              tmp = 0x03;
 236   2      //              app_uart_send(DOME_UART_CMD, &tmp, 1);
 237   2      
 238   2                      if (g_tWork.status.bits.DOME) {
 239   3                              g_tWork.status.bits.DOME = 0;
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 5   

 240   3                      } else {
 241   3                              g_tWork.status.bits.DOME = 1;
 242   3                      }
 243   2                      sendBuf[index++] = LAMP2LCD_HEADER;
 244   2                      sendBuf[index++] = 11;
 245   2                      sendBuf[index++] = KEY_DOME_CMD;
 246   2                      sendBuf[index++] = g_tWork.status.bits.DOME;
 247   2                      sendBuf[index++] = g_tWork.status.bits.pause;
 248   2                      app_dome_get_current_Name(sendBuf + index, 8);
 249   2                      index += 8;
 250   2                      for (i = 0; i < (sendBuf[1] + 1); i++) {
 251   3                              sendBuf[index] += sendBuf[i + 1];
 252   3                      }
 253   2                      index++;
 254   2                      app_2d4_send(sendBuf, index);
 255   2      
 256   2                      break;
 257   2              case KEY_VOL_ADD_CMD:
 258   2      #if 0
                              if (buf[3] == 1) {
                                      test_vol++;
                                      if (test_vol > 30) {
                                              test_vol = 30;
                                      }
                              } else if (buf[3] == 2) {
                                      if (test_vol) {
                                              test_vol--;
                                      }
                              }
              
                              sendBuf[index++] = LAMP2LCD_HEADER;
                              sendBuf[index++] = 0x02;
                              sendBuf[index++] = buf[2];
                              sendBuf[index++] = test_vol;
                              for (i = 0; i < (sendBuf[1] + 1); i++) {
                                      sendBuf[index] += sendBuf[i + 1];
                              }
              
              #else
 279   2                      app_uart_send(KEY_VOL_ADD_CMD, 0, 0);
 280   2      #endif
 281   2                      break;
 282   2              case KEY_VOL_MINUS_CMD:
 283   2      #if 0
                              if (buf[3] == 1) {
                                      test_vol++;
                                      if (test_vol > 30) {
                                              test_vol = 30;
                                      }
                              } else if (buf[3] == 2) {
                                      if (test_vol) {
                                              test_vol--;
                                      }
                              }
              
                              sendBuf[index++] = LAMP2LCD_HEADER;
                              sendBuf[index++] = 0x02;
                              sendBuf[index++] = buf[2];
                              sendBuf[index++] = test_vol;
                              for (i = 0; i < (sendBuf[1] + 1); i++) {
                                      sendBuf[index] += sendBuf[i + 1];
                              }
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 6   

              #else
 303   2                      app_uart_send(KEY_VOL_MINUS_CMD, 0, 0);
 304   2      #endif
 305   2                      break;
 306   2              case KEY_PLAY_SHORT_CMD:
 307   2      
 308   2      #if 0
                              if (g_tWork.status.bits.DOME) {
                                      if (g_tWork.status.bits.pause) {
                                              g_tWork.status.bits.pause = 0;
                                              app_dome_start_current();
                                      } else {
                                              g_tWork.status.bits.pause = 1;
                                              app_dome_stop_current();
                                      }
              
                                      sendBuf[index++] = LAMP2LCD_HEADER;
                                      sendBuf[index++] = 11;
                                      sendBuf[index++] = KEY_PLAY_SHORT_CMD;
                                      sendBuf[index++] = 0x05;
                                      sendBuf[index++] = g_tWork.status.bits.pause;
                                      app_dome_get_current_Name(sendBuf + index, 8);
                                      index += 8;
                                      for (i = 0; i < (sendBuf[1] + 1); i++) {
                                              sendBuf[index] += sendBuf[i + 1];
                                      }
                                      index++;
                                      app_2d4_send(sendBuf, index);
              
                              } else {
              #endif
 333   2                      app_uart_send(KEY_PLAY_SHORT_CMD, 0, 0);
 334   2      //              }
 335   2      
 336   2                      break;
 337   2              case KEY_MODE_CMD:
 338   2      #if 0
                              if (buf[3] == 1) {
                                      switch (g_tWork.mode) {
                                              case 'B':
                                              g_tWork.mode = 'F';
                                              break;
                                              case 'F':
                                              g_tWork.mode = 'A';
                                              break;
                                              case 'A':
                                              g_tWork.mode = 'U';
                                              break;
                                              case 'U':
                                              g_tWork.mode = 'B';
                                              break;
                                      }
                              }
              
                              sendBuf[index++] = LAMP2LCD_HEADER;
                              sendBuf[index++] = 0x02;
                              sendBuf[index++] = buf[2];
                              sendBuf[index++] = g_tWork.mode;
                              for (i = 0; i < (sendBuf[1] + 1); i++) {
                                      sendBuf[index] += sendBuf[i + 1];
                              }
              #else
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 7   

 364   2                      app_uart_send(KEY_MODE_CMD, 0, 0);
 365   2      #endif
 366   2      
 367   2                      break;
 368   2              }
 369   1              if (index) {
 370   2                      index++;
 371   2      #if 0
                              nop
                              nop
                              nop
                              nop
              
                              RF_TxMode();
                              sendRcv_flag = 1;
                              for (i = 0; i < 120; i++) {
                                      nop
                                      nop
                                      nop
                                      nop
                              }
              #else
 386   2                      app_2d4_send(sendBuf, index);
 387   2      #endif
 388   2              }
 389   1      
 390   1      }
 391          
 392          void app_2d4_pro(void) {
 393   1      
 394   1              if (sendRcv_flag) {
 395   2      
 396   2                      switch (ucRF_GetStatus()) {
 397   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 398   3      
 399   3                              RF_ClearFIFO();
 400   3                              RF_ClearStatus();
 401   3      
 402   3      //                      printf("Send OK\r\n");
 403   3      
 404   3                              sendRcv_flag = 0;
 405   3                              RF_RxMode();
 406   3      
 407   3      //                      Relay_toggle();
 408   3      
 409   3                              break;
 410   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 411   3      
 412   3                              RF_ClearFIFO();
 413   3                              RF_ClearStatus();
 414   3                              break;
 415   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 416   3      
 417   3                              RF_ClearFIFO();
 418   3                              RF_ClearStatus();
 419   3                              break;
 420   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 421   3      
 422   3                              RF_TxData(sendBuf, sizeof(sendBuf));
 423   3      
 424   3                              break;
 425   3                      }
C51 COMPILER V9.56.0.0   APP_2D4                                                           10/29/2017 18:39:50 PAGE 8   

 426   2      
 427   2              } else {
 428   2                      if (ucRF_DumpRxData(rcvBuf, sizeof(rcvBuf))) {
 429   3                              app_2d4_Rcv(rcvBuf);
 430   3                      }
 431   2              }
 432   1      }
 433          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1695    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     41      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
