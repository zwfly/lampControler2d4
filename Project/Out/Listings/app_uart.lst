C51 COMPILER V9.56.0.0   APP_UART                                                          10/18/2017 22:15:53 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_UART
OBJECT MODULE PLACED IN .\Out\Objects\app_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\in
                    -c;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_uart.lst) OBJ
                    -ECT(.\Out\Objects\app_uart.obj)

line level    source

   1          /*
   2           * app_uart.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ31ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          #include <string.h>
  10          
  11          static uint8_t index = 0;
  12          static uint8_t len = 0;
  13          static uint8_t i = 0;
  14          
  15          static uint8_t uart_sendBuf[16] = { 0 };
  16          
  17          void app_uart_Init(void) {
  18   1              index = 0;
  19   1              len = 0;
  20   1              i = 0;
  21   1      }
  22          
  23          void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
  24   1              index = 0;
  25   1      
  26   1              uart_sendBuf[index++] = 0x55;
  27   1              uart_sendBuf[index++] = 0xAA;
  28   1              uart_sendBuf[index++] = len + 1;
  29   1              uart_sendBuf[index++] = cmd;
  30   1              for (i = 0; i < len; i++) {
  31   2                      uart_sendBuf[index++] = *(ptr + i);
  32   2              }
  33   1              uart_sendBuf[index++] = app_CalcCRC8(uart_sendBuf, len + 4);
  34   1      
  35   1              for (i = 0; i < (len + 5); i++) {
  36   2                      Send_Data_To_UART0(uart_sendBuf[i]);
  37   2              }
  38   1      }
  39          
  40          void app_uart_pro(void) {
  41   1      
  42   1              if (riflag) {
  43   2                      riflag = 0;
  44   2      
  45   2                      if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE > 4) {
  46   3      
  47   3                              if (((rcv_T.rxBuf[rcv_T.pRead]) == 0x55)
  48   3                                              && ((rcv_T.rxBuf[(rcv_T.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
  49   4      
  50   4                                      len = rcv_T.rxBuf[(rcv_T.pRead + 2) % RCV_BUFSIZE];
  51   4      
  52   4                                      if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE
  53   4                                                      >= (len + 4)) {
C51 COMPILER V9.56.0.0   APP_UART                                                          10/18/2017 22:15:53 PAGE 2   

  54   5      
  55   5                                              if (rcv_T.rxBuf[(rcv_T.pRead + len + 3) % RCV_BUFSIZE]
  56   5                                                              != app_CalcCRC8_cycle(rcv_T.rxBuf + rcv_T.pRead,
  57   5                                                                              len + 3, rcv_T.pRead, RCV_BUFSIZE)) {
  58   6      //                                              printf("check error\r\n");
  59   6                                                      rcv_T.pRead++;
  60   6                                              } else {
  61   6                                                      index = 0;
  62   6                                                      memset(sendBuf, 0, PAYLOAD_WIDTH);
  63   6                                                      switch (rcv_T.rxBuf[(rcv_T.pRead + 3) % RCV_BUFSIZE]) {
  64   7                                                      case VOL_ADD_UART_CMD:
  65   7      
  66   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
  67   7                                                              sendBuf[index++] = len;
  68   7                                                              sendBuf[index++] = VOL_ADD_CMD;
  69   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
  70   7                                                                              % RCV_BUFSIZE];
  71   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
  72   8                                                                      sendBuf[index] += sendBuf[i + 1];
  73   8                                                              }
  74   7                                                              index++;
  75   7                                                              app_2d4_send(sendBuf, index);
  76   7                                                              break;
  77   7                                                      case VOL_MINUS_UART_CMD:
  78   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
  79   7                                                              sendBuf[index++] = len;
  80   7                                                              sendBuf[index++] = VOL_MINUS_CMD;
  81   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
  82   7                                                                              % RCV_BUFSIZE];
  83   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
  84   8                                                                      sendBuf[index] += sendBuf[i + 1];
  85   8                                                              }
  86   7                                                              index++;
  87   7                                                              app_2d4_send(sendBuf, index);
  88   7      
  89   7                                                              break;
  90   7                                                      case UP_UART_CMD:
  91   7      
  92   7                                                              break;
  93   7                                                      case DOWN_UART_CMD:
  94   7      
  95   7                                                              break;
  96   7                                                      case DOME_UART_CMD:
  97   7      
  98   7                                                              break;
  99   7                                                      case MODE_UART_CMD:   //MODE
 100   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 101   7                                                              sendBuf[index++] = len;
 102   7                                                              sendBuf[index++] = MODE_CMD;
 103   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 104   7                                                                              % RCV_BUFSIZE];
 105   7                                                              switch (rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]) {
 106   8                                                              case 0x01:  //BT
 107   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 108   8                                                                                      % RCV_BUFSIZE];
 109   8                                                                      break;
 110   8                                                              case 0x02:  //FM
 111   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 112   8                                                                                      % RCV_BUFSIZE];
 113   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 6)
 114   8                                                                                      % RCV_BUFSIZE];
 115   8                                                                      break;
C51 COMPILER V9.56.0.0   APP_UART                                                          10/18/2017 22:15:53 PAGE 3   

 116   8                                                              case 0x03:  //AUX
 117   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 118   8                                                                                      % RCV_BUFSIZE];
 119   8                                                                      break;
 120   8                                                              case 0x04:  //USB
 121   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 122   8                                                                                      % RCV_BUFSIZE];
 123   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 6)
 124   8                                                                                      % RCV_BUFSIZE];
 125   8                                                                      break;
 126   8                                                              default:
 127   8                                                                      break;
 128   8                                                              }
 129   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 130   8                                                                      sendBuf[index] += sendBuf[i + 1];
 131   8                                                              }
 132   7                                                              index++;
 133   7                                                              app_2d4_send(sendBuf, index);
 134   7                                                              break;
 135   7                                                      case PLAY_UART_CMD:
 136   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 137   7                                                              sendBuf[index++] = len;
 138   7                                                              sendBuf[index++] = PLAY_CMD;
 139   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 140   7                                                                              % RCV_BUFSIZE];
 141   7                                                              switch (rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]) {
 142   8                                                              case 0x01:  //BT
 143   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 144   8                                                                                      % RCV_BUFSIZE];
 145   8                                                                      break;
 146   8                                                              case 0x02:  //FM
 147   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 148   8                                                                                      % RCV_BUFSIZE];
 149   8                                                                      if (1
 150   8                                                                                      == rcv_T.rxBuf[(rcv_T.pRead + 5)
 151   8                                                                                                      % RCV_BUFSIZE]) {
 152   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 153   9                                                                                              + 6) % RCV_BUFSIZE];
 154   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 155   9                                                                                              + 7) % RCV_BUFSIZE];
 156   9                                                                      }
 157   8                                                                      break;
 158   8                                                              case 0x03:  //AUX
 159   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 160   8                                                                                      % RCV_BUFSIZE];
 161   8                                                                      break;
 162   8                                                              case 0x04:  //USB
 163   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 164   8                                                                                      % RCV_BUFSIZE];
 165   8                                                                      if (1
 166   8                                                                                      == rcv_T.rxBuf[(rcv_T.pRead + 5)
 167   8                                                                                                      % RCV_BUFSIZE]) {
 168   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 169   9                                                                                              + 6) % RCV_BUFSIZE];
 170   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 171   9                                                                                              + 7) % RCV_BUFSIZE];
 172   9                                                                      }
 173   8                                                                      break;
 174   8                                                              default:
 175   8                                                                      break;
 176   8                                                              }
 177   7      
C51 COMPILER V9.56.0.0   APP_UART                                                          10/18/2017 22:15:53 PAGE 4   

 178   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 179   8                                                                      sendBuf[index] += sendBuf[i + 1];
 180   8                                                              }
 181   7                                                              index++;
 182   7                                                              app_2d4_send(sendBuf, index);
 183   7      
 184   7                                                              break;
 185   7                                                      default:
 186   7                                                              break;
 187   7                                                      }
 188   6                                                      rcv_T.pRead += len + 4;
 189   6                                              }
 190   5                                      }
 191   4      
 192   4                              } else {
 193   4                                      rcv_T.pRead++;
 194   4                              }
 195   3                              rcv_T.pRead = rcv_T.pRead % RCV_BUFSIZE;
 196   3                      }
 197   2              }
 198   1      
 199   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1426    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     19       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
