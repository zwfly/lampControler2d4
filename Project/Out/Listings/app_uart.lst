C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_UART
OBJECT MODULE PLACED IN .\Out\Objects\app_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_uart.c LARGE OPTIMIZE(8,SIZE) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_uart.lst) TABS
                    -(2) OBJECT(.\Out\Objects\app_uart.obj)

line level    source

   1          /*
   2           * app_uart.c
   3           *
   4           *  Created on: 2017年8月31日
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          #include <string.h>
  10          
  11          #define BT_MODE     0x01
  12          #define FM_MODE     0x02
  13          #define USB_MODE    0x03
  14          #define AUX_MODE    0x04
  15          #define DOME_MODE   0x05
  16          #define CALL_MODE   0x06
  17          
  18          static uint8_t index = 0;
  19          static uint8_t len = 0;
  20          static uint8_t i = 0, j = 0;
  21          static uint16_t tmp = 0;
  22          static uint8_t u8_tmp = 0;
  23          static uint8_t uart_sendBuf[16] = { 0 };
  24          
  25          void app_uart_Init(void) {
  26   1        index = 0;
  27   1        len = 0;
  28   1        i = 0;
  29   1      
  30   1        memset((uint8_t *) &rcv_T, 0, sizeof(RCV_T));
  31   1      }
  32          
  33          void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
  34   1        index = 0;
  35   1      
  36   1        uart_sendBuf[index++] = 0x55;
  37   1        uart_sendBuf[index++] = 0xAA;
  38   1        uart_sendBuf[index++] = len + 1;
  39   1        uart_sendBuf[index++] = cmd;
  40   1        for (i = 0; i < len; i++) {
  41   2          uart_sendBuf[index++] = *(ptr + i);
  42   2        }
  43   1        uart_sendBuf[index++] = app_CalcCRC8(uart_sendBuf, len + 4);
  44   1      
  45   1        for (i = 0; i < (len + 5); i++) {
  46   2          Send_Data_To_UART0(uart_sendBuf[i]);
  47   2        }
  48   1      }
  49          
  50          void app_uart_pro(void) {
  51   1        while (riflag) {
  52   2          riflag--;
  53   2          if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE >= 4) {
C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 2   

  54   3            if (((rcv_T.rxBuf[rcv_T.pRead]) == 0x55)
  55   3                && ((rcv_T.rxBuf[(rcv_T.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
  56   4              len = rcv_T.rxBuf[(rcv_T.pRead + 2) % RCV_BUFSIZE];
  57   4              if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE
  58   4                  >= (len + 4)) {
  59   5                if (rcv_T.rxBuf[(rcv_T.pRead + len + 3) % RCV_BUFSIZE]
  60   5                    != app_CalcCRC8_cycle(rcv_T.rxBuf + rcv_T.pRead,
  61   5                        len + 3, rcv_T.pRead, RCV_BUFSIZE)) {
  62   6                  rcv_T.pRead++;
  63   6                } else {
  64   6                  index = 0;
  65   6                  memset(sendBuf, 0, PAYLOAD_WIDTH);
  66   6                  switch (rcv_T.rxBuf[(rcv_T.pRead + 3) % RCV_BUFSIZE]) {
  67   7                  case BLINK_METHOD_CMD:  //闪法
  68   7                  {
  69   8                    uint16_t index = 0;
  70   8                    index =
  71   8                        rcv_T.rxBuf[(rcv_T.pRead + 12) % RCV_BUFSIZE];
  72   8                    u8_tmp = (0x4800 - DOME_START_ADDR)
  73   8                        / sizeof(DOME_DEFAULT_T);
  74   8                    if (index >= (u8_tmp - 1)) {
  75   9                      break;
  76   9                    }
  77   8                    u8_tmp = (0x4800 - DOME_START_ADDR) / 128;
  78   8                    if (index == 0) {
  79   9                      for (i = 0; i < u8_tmp; i++) {
  80  10                        app_eeprom_erase(i * 128);
  81  10                      }
  82   9                    }
  83   8      #if 0
                            for (i = (index + 1); i < DEFAULT_DOME_NUM; i++) {
                              uint16_t addr = i * sizeof(DOME_DEFAULT_T)
                              + (&dome_blink.header.index
                                  - &dome_blink);
                              app_eeprom_write_byte(addr, 0);
                              nop
                            }
              #endif
  92   8      #if 1
  93   8                    tmp = rcv_T.rxBuf[(rcv_T.pRead + 13) % RCV_BUFSIZE]
  94   8                        & 0x0F;
  95   8                    for (i = 0;
  96   8                        i
  97   8                            < (tmp * sizeof(SUBDOME_T)
  98   8                                + sizeof(DOME_HEADER_T));
  99   8                        i++) {
 100   9                      uint16_t addr = index * sizeof(DOME_DEFAULT_T)
 101   9                          + i;
 102   9                      app_eeprom_write_byte(addr,
 103   9                          rcv_T.rxBuf[(rcv_T.pRead + 4 + i)
 104   9                              % RCV_BUFSIZE]);
 105   9                    }
 106   8      
 107   8      #endif
 108   8      
 109   8                    u8_tmp = (0x4800 - DOME_START_ADDR)
 110   8                        / sizeof(DOME_DEFAULT_T);
 111   8                    blink_number = 0;
 112   8                    for (i = 0; i < u8_tmp; i++) {
 113   9                      if (0xFF != app_eeprom_read_byte(
 114   9                      DOME_START_ADDR + i * sizeof(DOME_DEFAULT_T))) {
 115  10                        blink_number++;
C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 3   

 116  10                      } else {
 117  10                        break;
 118  10                      }
 119   9                    }
 120   8      
 121   8                    u8_tmp = index & 0xFF;
 122   8                    app_uart_send(BLINK_METHOD_CMD, &u8_tmp, 1);
 123   8                  }
 124   7                    break;
 125   7                  case RCV_VOL_CMD:
 126   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 127   7                    sendBuf[index++] = len;
 128   7                    sendBuf[index++] = RCV_VOL_CMD;
 129   7                    for (i = 0; i < (len - 1); i++) {
 130   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 131   8                          + i) % RCV_BUFSIZE];
 132   8                    }
 133   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 134   8                      sendBuf[index] += sendBuf[i + 1];
 135   8                    }
 136   7                    index++;
 137   7                    app_2d4_send(sendBuf, index);
 138   7                    break;
 139   7                  case RCV_POWER_STATUS_CMD:
 140   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 141   7                    sendBuf[index++] = len;
 142   7                    sendBuf[index++] = RCV_POWER_STATUS_CMD;
 143   7                    for (i = 0; i < (len - 1); i++) {
 144   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 145   8                          + i) % RCV_BUFSIZE];
 146   8                    }
 147   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 148   8                      sendBuf[index] += sendBuf[i + 1];
 149   8                    }
 150   7                    index++;
 151   7                    app_2d4_send(sendBuf, index);
 152   7                    break;
 153   7      #if 0
                            case RCV_X_BOX_STATUS_CMD:
                            sendBuf[index++] = LAMP2LCD_HEADER;
                            sendBuf[index++] = len;
                            sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
                            for (i = 0; i < (len - 1); i++) {
                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
                                  + i) % RCV_BUFSIZE];
                            }
                            for (i = 0; i < (sendBuf[1] + 1); i++) {
                              sendBuf[index] += sendBuf[i + 1];
                            }
                            index++;
                            app_2d4_send(sendBuf, index);
                            break;
              #endif
 169   7                  case RCV_BT_STATUS_CMD:
 170   7                    if (g_tWork.status.bits.DOME) {
 171   8                      break;
 172   8                    }
 173   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 174   7                    sendBuf[index++] = len;
 175   7                    sendBuf[index++] = RCV_BT_STATUS_CMD;
 176   7                    for (i = 0; i < (len - 1); i++) {
 177   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 4   

 178   8                          + i) % RCV_BUFSIZE];
 179   8                    }
 180   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 181   8                      sendBuf[index] += sendBuf[i + 1];
 182   8                    }
 183   7                    index++;
 184   7                    app_2d4_send(sendBuf, index);
 185   7                    break;
 186   7                  case RCV_PREV_NEXT_CMD:
 187   7                    if (g_tWork.status.bits.DOME) {
 188   8                      break;
 189   8                    }
 190   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 191   7                    sendBuf[index++] = len;
 192   7                    sendBuf[index++] = RCV_PREV_NEXT_CMD;
 193   7                    for (i = 0; i < (len - 1); i++) {
 194   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 195   8                          + i) % RCV_BUFSIZE];
 196   8                    }
 197   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 198   8                      sendBuf[index] += sendBuf[i + 1];
 199   8                    }
 200   7                    index++;
 201   7                    app_2d4_send(sendBuf, index);
 202   7                    break;
 203   7                  case RCV_USB_PLAY_TIME_CMD:
 204   7                    if (g_tWork.status.bits.DOME) {
 205   8                      break;
 206   8                    }
 207   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 208   7                    sendBuf[index++] = len;
 209   7                    sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
 210   7                    for (i = 0; i < (len - 1); i++) {
 211   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 212   8                          + i) % RCV_BUFSIZE];
 213   8                    }
 214   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 215   8                      sendBuf[index] += sendBuf[i + 1];
 216   8                    }
 217   7                    index++;
 218   7                    app_2d4_send(sendBuf, index);
 219   7                    break;
 220   7                  case RCV_FM_HZ_CMD:
 221   7                    if (g_tWork.status.bits.DOME) {
 222   8                      break;
 223   8                    }
 224   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 225   7                    sendBuf[index++] = len;
 226   7                    sendBuf[index++] = RCV_FM_HZ_CMD;
 227   7                    for (i = 0; i < (len - 1); i++) {
 228   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 229   8                          + i) % RCV_BUFSIZE];
 230   8                    }
 231   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 232   8                      sendBuf[index] += sendBuf[i + 1];
 233   8                    }
 234   7                    index++;
 235   7                    app_2d4_send(sendBuf, index);
 236   7                    break;
 237   7                  case MODE_CHANGE_CMD:   //MODE
 238   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 239   7                    sendBuf[index++] = len;
C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 5   

 240   7                    sendBuf[index++] = MODE_CHANGE_CMD;
 241   7                    for (i = 0; i < (len - 1); i++) {
 242   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 243   8                          + i) % RCV_BUFSIZE];
 244   8                    }
 245   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 246   8                      sendBuf[index] += sendBuf[i + 1];
 247   8                    }
 248   7                    index++;
 249   7                    app_2d4_send(sendBuf, index);
 250   7                    break;
 251   7                  case RCV_PLAY_PAUSE_STATUS_CMD:
 252   7                    if (g_tWork.status.bits.DOME) {
 253   8                      break;
 254   8                    }
 255   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 256   7                    sendBuf[index++] = len;
 257   7                    sendBuf[index++] =
 258   7                    RCV_PLAY_PAUSE_STATUS_CMD;
 259   7                    for (i = 0; i < (len - 1); i++) {
 260   8                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 261   8                          + i) % RCV_BUFSIZE];
 262   8                    }
 263   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 264   8                      sendBuf[index] += sendBuf[i + 1];
 265   8                    }
 266   7                    index++;
 267   7                    app_2d4_send(sendBuf, index);
 268   7      
 269   7                    break;
 270   7                    /// app --start
 271   7                  case KEY_CARD_POWER_CMD:
 272   7                    if (g_tWork.status.bits.blinkEnable == 0) {
 273   8                      g_tWork.status.bits.blinkEnable = 1;
 274   8                      app_dome_start_current();
 275   8                    } else {
 276   8                      g_tWork.status.bits.blinkEnable = 0;
 277   8                      app_dome_stop_current();
 278   8                    }
 279   7                    sendBuf[index++] = LAMP2LCD_HEADER;
 280   7                    sendBuf[index++] = 10;
 281   7                    sendBuf[index++] = KEY_POWER_SHORT_CMD;
 282   7                    if (g_tWork.status.bits.blinkEnable) {
 283   8                      sendBuf[index++] = 0;
 284   8                    } else {
 285   8                      sendBuf[index++] = 1;
 286   8                    }
 287   7                    app_dome_get_current_Name(sendBuf + index, 8);
 288   7      #if 1
 289   7                    for (i = 0; i < 8; i++) {
 290   8                      if ((*(sendBuf + index + i) == 0)
 291   8                          || (*(sendBuf + index + i) == 0xFF)) {
 292   9                        *(sendBuf + index + i) = ' ';
 293   9                      }
 294   8                    }
 295   7      #endif
 296   7                    index += 8;
 297   7                    for (i = 0; i < (sendBuf[1] + 1); i++) {
 298   8                      sendBuf[index] += sendBuf[i + 1];
 299   8                    }
 300   7                    index++;
 301   7                    app_2d4_send(sendBuf, index);
C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 6   

 302   7                    break;
 303   7                  case KEY_CARD_DEMO_CMD:
 304   7      //              if (g_tWork.status.bits.DEMO) {
 305   7      //                g_tWork.status.bits.DEMO = 0;
 306   7      //              } else {
 307   7                    g_tWork.status.bits.DEMO = 1;
 308   7      //              }
 309   7                    app_dome_start(0);
 310   7      
 311   7                    break;
 312   7                  case APP_COLOR_ATLA_CMD:
 313   7      #if 1
 314   7                    app_dome_rgb(
 315   7                        rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE],
 316   7                        rcv_T.rxBuf[(rcv_T.pRead + 5) % RCV_BUFSIZE],
 317   7                        rcv_T.rxBuf[(rcv_T.pRead + 6) % RCV_BUFSIZE]);
 318   7      #else
                            app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
              #endif
 321   7                    break;
 322   7                  case APP_BRIGHT_CMD:
 323   7                    dome_running_param.bright = rcv_T.rxBuf[(rcv_T.pRead
 324   7                        + 4) % RCV_BUFSIZE];
 325   7                    Light_bright_set(
 326   7                        rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]);
 327   7                    break;
 328   7                  case APP_SPEED_CMD:
 329   7                    dome_running_param.speed = rcv_T.rxBuf[(rcv_T.pRead
 330   7                        + 4) % RCV_BUFSIZE];
 331   7                    break;
 332   7                  case APP_FLASH_INDEX_CMD:
 333   7                    g_tWork.status.bits.DEMO = 0;
 334   7                    g_tWork.status.bits.blinkEnable = 1;
 335   7                    app_dome_start(
 336   7                        rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]);
 337   7                    break;
 338   7                  case APP_SWITCH_INDEX_CMD: {
 339   8                    uint8_t switchData = rcv_T.rxBuf[(rcv_T.pRead + 4)
 340   8                        % RCV_BUFSIZE];
 341   8                    if (((switchData >> 4) & 0x0F) == 0) {
 342   9                      Relay_set(switchData & 0x0F);
 343   9                    }
 344   8                  }
 345   7                    break;
 346   7                    /// app --end
 347   7                  default:
 348   7                    break;
 349   7                  }
 350   6                  rcv_T.pRead += len + 4;
 351   6      #if 1
 352   6                  rcv_T.pRead = rcv_T.pRead % RCV_BUFSIZE;
 353   6      //            break;
 354   6                  return;
 355   6      #endif
 356   6                }
 357   5              }
 358   4            } else {
 359   4              rcv_T.pRead++;
 360   4            }
 361   3            rcv_T.pRead = rcv_T.pRead % RCV_BUFSIZE;
 362   3          }
 363   2        }
C51 COMPILER V9.52.0.0   APP_UART                                                          12/06/2017 17:03:20 PAGE 7   

 364   1      
 365   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3420    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     23       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
