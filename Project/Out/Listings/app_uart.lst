C51 COMPILER V9.56.0.0   APP_UART                                                          11/01/2017 06:16:58 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_UART
OBJECT MODULE PLACED IN .\Out\Objects\app_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\in
                    -c;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_uart.lst) OBJ
                    -ECT(.\Out\Objects\app_uart.obj)

line level    source

   1          /*
   2           * app_uart.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ31ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          #include <string.h>
  10          
  11          #define BT_MODE     0x01
  12          #define FM_MODE     0x02
  13          #define USB_MODE    0x03
  14          #define AUX_MODE    0x04
  15          #define DOME_MODE   0x05
  16          #define CALL_MODE   0x06
  17          
  18          static uint8_t index = 0;
  19          static uint8_t len = 0;
  20          static uint8_t i = 0;
  21          
  22          static uint8_t uart_sendBuf[16] = { 0 };
  23          
  24          void app_uart_Init(void) {
  25   1              index = 0;
  26   1              len = 0;
  27   1              i = 0;
  28   1      }
  29          
  30          void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
  31   1              index = 0;
  32   1      
  33   1              uart_sendBuf[index++] = 0x55;
  34   1              uart_sendBuf[index++] = 0xAA;
  35   1              uart_sendBuf[index++] = len + 1;
  36   1              uart_sendBuf[index++] = cmd;
  37   1              for (i = 0; i < len; i++) {
  38   2                      uart_sendBuf[index++] = *(ptr + i);
  39   2              }
  40   1              uart_sendBuf[index++] = app_CalcCRC8(uart_sendBuf, len + 4);
  41   1      
  42   1              for (i = 0; i < (len + 5); i++) {
  43   2                      Send_Data_To_UART0(uart_sendBuf[i]);
  44   2              }
  45   1      }
  46          
  47          void app_uart_pro(void) {
  48   1              while (riflag) {
  49   2                      riflag--;
  50   2                      if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE >= 4) {
  51   3                              if (((rcv_T.rxBuf[rcv_T.pRead]) == 0x55)
  52   3                                              && ((rcv_T.rxBuf[(rcv_T.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
  53   4                                      len = rcv_T.rxBuf[(rcv_T.pRead + 2) % RCV_BUFSIZE];
C51 COMPILER V9.56.0.0   APP_UART                                                          11/01/2017 06:16:58 PAGE 2   

  54   4                                      if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE
  55   4                                                      >= (len + 4)) {
  56   5                                              if (rcv_T.rxBuf[(rcv_T.pRead + len + 3) % RCV_BUFSIZE]
  57   5                                                              != app_CalcCRC8_cycle(rcv_T.rxBuf + rcv_T.pRead,
  58   5                                                                              len + 3, rcv_T.pRead, RCV_BUFSIZE)) {
  59   6                                                      rcv_T.pRead++;
  60   6                                              } else {
  61   6                                                      index = 0;
  62   6                                                      memset(sendBuf, 0, PAYLOAD_WIDTH);
  63   6                                                      switch (rcv_T.rxBuf[(rcv_T.pRead + 3) % RCV_BUFSIZE]) {
  64   7                                                      case RCV_VOL_CMD:
  65   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
  66   7                                                              sendBuf[index++] = len;
  67   7                                                              sendBuf[index++] = RCV_VOL_CMD;
  68   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
  69   7                                                                              % RCV_BUFSIZE];
  70   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
  71   8                                                                      sendBuf[index] += sendBuf[i + 1];
  72   8                                                              }
  73   7                                                              index++;
  74   7                                                              app_2d4_send(sendBuf, index);
  75   7                                                              break;
  76   7                                                      case RCV_POWER_STATUS_CMD:
  77   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
  78   7                                                              sendBuf[index++] = len;
  79   7                                                              sendBuf[index++] = RCV_POWER_STATUS_CMD;
  80   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
  81   7                                                                              % RCV_BUFSIZE];
  82   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
  83   8                                                                      sendBuf[index] += sendBuf[i + 1];
  84   8                                                              }
  85   7                                                              index++;
  86   7                                                              app_2d4_send(sendBuf, index);
  87   7                                                              break;
  88   7                                                      case RCV_X_BOX_STATUS_CMD:
  89   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
  90   7                                                              sendBuf[index++] = len;
  91   7                                                              sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
  92   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
  93   7                                                                              % RCV_BUFSIZE];
  94   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
  95   8                                                                      sendBuf[index] += sendBuf[i + 1];
  96   8                                                              }
  97   7                                                              index++;
  98   7                                                              app_2d4_send(sendBuf, index);
  99   7                                                              break;
 100   7                                                      case RCV_BT_STATUS_CMD:
 101   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 102   7                                                              sendBuf[index++] = len;
 103   7                                                              sendBuf[index++] = RCV_BT_STATUS_CMD;
 104   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 105   7                                                                              % RCV_BUFSIZE];
 106   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 107   8                                                                      sendBuf[index] += sendBuf[i + 1];
 108   8                                                              }
 109   7                                                              index++;
 110   7                                                              app_2d4_send(sendBuf, index);
 111   7                                                              break;
 112   7                                                      case RCV_PREV_NEXT_CMD:
 113   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 114   7                                                              sendBuf[index++] = len;
 115   7                                                              sendBuf[index++] = RCV_PREV_NEXT_CMD;
C51 COMPILER V9.56.0.0   APP_UART                                                          11/01/2017 06:16:58 PAGE 3   

 116   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 117   7                                                                              % RCV_BUFSIZE];
 118   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 119   8                                                                      sendBuf[index] += sendBuf[i + 1];
 120   8                                                              }
 121   7                                                              index++;
 122   7                                                              app_2d4_send(sendBuf, index);
 123   7                                                              break;
 124   7                                                      case RCV_USB_PLAY_TIME_CMD:
 125   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 126   7                                                              sendBuf[index++] = len;
 127   7                                                              sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
 128   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 129   7                                                                              % RCV_BUFSIZE];
 130   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 131   8                                                                      sendBuf[index] += sendBuf[i + 1];
 132   8                                                              }
 133   7                                                              index++;
 134   7                                                              app_2d4_send(sendBuf, index);
 135   7                                                              break;
 136   7                                                      case RCV_FM_HZ_CMD:
 137   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 138   7                                                              sendBuf[index++] = len;
 139   7                                                              sendBuf[index++] = RCV_FM_HZ_CMD;
 140   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 141   7                                                                              % RCV_BUFSIZE];
 142   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 143   8                                                                      sendBuf[index] += sendBuf[i + 1];
 144   8                                                              }
 145   7                                                              index++;
 146   7                                                              app_2d4_send(sendBuf, index);
 147   7                                                              break;
 148   7                                                      case MODE_CHANGE_CMD:   //MODE
 149   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 150   7                                                              sendBuf[index++] = len;
 151   7                                                              sendBuf[index++] = MODE_CHANGE_CMD;
 152   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 153   7                                                                              % RCV_BUFSIZE];
 154   7                                                              switch (rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]) {
 155   8                                                              case BT_MODE:  //BT
 156   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 157   8                                                                                      % RCV_BUFSIZE];
 158   8                                                                      break;
 159   8                                                              case FM_MODE:  //FM
 160   8      
 161   8                                                                      break;
 162   8                                                              case AUX_MODE:  //AUX
 163   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 164   8                                                                                      % RCV_BUFSIZE];
 165   8                                                                      break;
 166   8                                                              case USB_MODE:  //USB
 167   8      
 168   8                                                                      break;
 169   8                                                              default:
 170   8                                                                      break;
 171   8                                                              }
 172   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 173   8                                                                      sendBuf[index] += sendBuf[i + 1];
 174   8                                                              }
 175   7                                                              index++;
 176   7                                                              app_2d4_send(sendBuf, index);
 177   7                                                              break;
C51 COMPILER V9.56.0.0   APP_UART                                                          11/01/2017 06:16:58 PAGE 4   

 178   7                                                      case RCV_PLAY_PAUSE_STATUS_CMD:
 179   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 180   7                                                              sendBuf[index++] = len;
 181   7                                                              sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
 182   7                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4)
 183   7                                                                              % RCV_BUFSIZE];
 184   7                                                              switch (rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]) {
 185   8                                                              case BT_MODE:  //BT
 186   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 187   8                                                                                      % RCV_BUFSIZE];
 188   8                                                                      break;
 189   8                                                              case FM_MODE:  //FM
 190   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 191   8                                                                                      % RCV_BUFSIZE];
 192   8                                                                      if (1
 193   8                                                                                      == rcv_T.rxBuf[(rcv_T.pRead + 5)
 194   8                                                                                                      % RCV_BUFSIZE]) {
 195   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 196   9                                                                                              + 6) % RCV_BUFSIZE];
 197   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 198   9                                                                                              + 7) % RCV_BUFSIZE];
 199   9                                                                      }
 200   8                                                                      break;
 201   8                                                              case AUX_MODE:  //AUX
 202   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 203   8                                                                                      % RCV_BUFSIZE];
 204   8                                                                      break;
 205   8                                                              case USB_MODE:  //USB
 206   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 5)
 207   8                                                                                      % RCV_BUFSIZE];
 208   8                                                                      if (1
 209   8                                                                                      == rcv_T.rxBuf[(rcv_T.pRead + 5)
 210   8                                                                                                      % RCV_BUFSIZE]) {
 211   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 212   9                                                                                              + 6) % RCV_BUFSIZE];
 213   9                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead
 214   9                                                                                              + 7) % RCV_BUFSIZE];
 215   9                                                                      }
 216   8                                                                      break;
 217   8                                                              default:
 218   8                                                                      break;
 219   8                                                              }
 220   7      
 221   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 222   8                                                                      sendBuf[index] += sendBuf[i + 1];
 223   8                                                              }
 224   7                                                              index++;
 225   7                                                              app_2d4_send(sendBuf, index);
 226   7      
 227   7                                                              break;
 228   7                                                      default:
 229   7                                                              break;
 230   7                                                      }
 231   6                                                      rcv_T.pRead += len + 4;
 232   6                                              }
 233   5                                      }
 234   4                              } else {
 235   4                                      rcv_T.pRead++;
 236   4                              }
 237   3                              rcv_T.pRead = rcv_T.pRead % RCV_BUFSIZE;
 238   3                      }
 239   2              }
C51 COMPILER V9.56.0.0   APP_UART                                                          11/01/2017 06:16:58 PAGE 5   

 240   1      
 241   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2217    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     19       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
